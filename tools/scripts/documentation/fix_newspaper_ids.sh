#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ ID –≤ newspaper
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./tools/scripts/fix_newspaper_ids.sh [—Ç–∏–ø] [--dry-run]
# –ü—Ä–∏–∫–ª–∞–¥–∏: 
#   ./tools/scripts/fix_newspaper_ids.sh report --dry-run
#   ./tools/scripts/fix_newspaper_ids.sh work_results

set -e

echo "üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ ID –≤ newspaper..."

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
if [ $# -lt 1 ]; then
    error "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [—Ç–∏–ø] [--dry-run]"
    echo "–¢–∏–ø–∏: report, work_results, steps_plan, all"
    echo "–ü—Ä–∏–∫–ª–∞–¥–∏:"
    echo "  $0 report --dry-run"
    echo "  $0 work_results"
    echo "  $0 all"
    exit 1
fi

TYPE="$1"
DRY_RUN=false

if [ "$2" = "--dry-run" ]; then
    DRY_RUN=true
    warn "–†–µ–∂–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (--dry-run) - —Ñ–∞–π–ª–∏ –Ω–µ –±—É–¥—É—Ç—å –∑–º—ñ–Ω–µ–Ω—ñ"
fi

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è ID –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É
extract_id() {
    local filename="$1"
    echo "$filename" | grep -o '^[0-9]\{4\}' || echo ""
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ —Ñ–∞–π–ª —î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º
is_special_file() {
    local filename="$1"
    case "$filename" in
        "README.md"|"_sandbox.md"|"UPWORK_DEVELOPER_SETUP.md")
            return 0  # true - —Ü–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
            ;;
        *)
            return 1  # false - —Ü–µ –∑–≤–∏—á–∞–π–Ω–∏–π —Ñ–∞–π–ª
            ;;
    esac
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ —Ñ–∞–π–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ backup –ø–∞–ø—Ü—ñ
is_backup_file() {
    local filepath="$1"
    if [[ "$filepath" == *"/backup"* ]] || [[ "$filepath" == *"/backup_old"* ]]; then
        return 0  # true - —Ü–µ backup —Ñ–∞–π–ª
    else
        return 1  # false - —Ü–µ –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤—ñ–ª—å–Ω–æ–≥–æ ID
get_next_free_id() {
    local folder="$1"
    local used_ids="$2"
    local next_id=1
    
    while echo "$used_ids" | grep -q "^$(printf "%04d" $next_id)$"; do
        next_id=$((next_id + 1))
    done
    
    printf "%04d" $next_id
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –≤ –ø–∞–ø—Ü—ñ
fix_duplicates_in_folder() {
    local folder="$1"
    log "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –≤ –ø–∞–ø—Ü—ñ: $folder"
    
    # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ (–±–µ–∑ backup)
    local main_files=""
    local files=$(find "$folder" -name "*.md" -type f -not -name "README.md" | sort)
    
    while IFS= read -r file; do
        if [ -n "$file" ] && ! is_backup_file "$file"; then
            local basename=$(basename "$file")
            if ! is_special_file "$basename"; then
                main_files="$main_files$file"$'\n'
            fi
        fi
    done <<< "$files"
    
    if [ -z "$main_files" ]; then
        info "–ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤ $folder"
        return
    fi
    
    # –ó–±—ñ—Ä –≤—Å—ñ—Ö ID —Ç–∞ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
    local id_map=""
    local duplicates=""
    
    while IFS= read -r file; do
        if [ -n "$file" ]; then
            local basename=$(basename "$file")
            local id=$(extract_id "$basename")
            
            if [ -n "$id" ]; then
                if echo "$id_map" | grep -q "^$id:"; then
                    # –¶–µ –¥—É–±–ª—ñ–∫–∞—Ç
                    duplicates="$duplicates$file:$id"$'\n'
                else
                    # –ü–µ—Ä—à–∏–π —Ä–∞–∑ –∑—É—Å—Ç—Ä—ñ—á–∞—î–º–æ —Ü–µ–π ID
                    id_map="$id_map$id:$file"$'\n'
                fi
            fi
        fi
    done <<< "$main_files"
    
    if [ -z "$duplicates" ]; then
        log "‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ $folder"
        return
    fi
    
    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
    warn "–ó–Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –≤ $folder:"
    
    while IFS= read -r duplicate; do
        if [ -n "$duplicate" ]; then
            local file=$(echo "$duplicate" | cut -d: -f1)
            local old_id=$(echo "$duplicate" | cut -d: -f2)
            local basename=$(basename "$file")
            local dirname=$(dirname "$file")
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É –±–µ–∑ ID
            local name_without_id=$(echo "$basename" | sed 's/^[0-9]\{4\}-//')
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤—ñ–ª—å–Ω–æ–≥–æ ID
            local used_ids=$(echo "$id_map" | cut -d: -f1 | sort -n)
            local new_id=$(get_next_free_id "$folder" "$used_ids")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É
            local new_basename="${new_id}-${name_without_id}"
            local new_filepath="$dirname/$new_basename"
            
            warn "  –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è: $basename -> $new_basename (ID: $old_id -> $new_id)"
            
            if [ "$DRY_RUN" = false ]; then
                if mv "$file" "$new_filepath"; then
                    log "  ‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ: $new_basename"
                    # –û–Ω–æ–≤–ª—é—î–º–æ id_map –∑ –Ω–æ–≤–∏–º ID
                    id_map="$id_map$new_id:$new_filepath"$'\n'
                else
                    error "  ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è: $file"
                fi
            fi
        fi
    done <<< "$duplicates"
}

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    log "–ü–æ—á–∞—Ç–æ–∫ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ ID –≤ newspaper..."
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
    local folders=()
    
    case $TYPE in
        "report")
            folders=("docs/newspaper/report")
            ;;
        "work_results")
            folders=("docs/newspaper/report")
            ;;
        "steps_plan")
            folders=("docs/newspaper/report")
            ;;
        "all")
            folders=("docs/newspaper/report" "docs/newspaper/research")
            ;;
        *)
            error "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø: $TYPE"
            echo "–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏: report, work_results, steps_plan, all"
            exit 1
            ;;
    esac
    
    # –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ—ó –ø–∞–ø–∫–∏
    for folder in "${folders[@]}"; do
        if [ -d "$folder" ]; then
            echo ""
            fix_duplicates_in_folder "$folder"
        else
            warn "–ü–∞–ø–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: $folder"
        fi
    done
    
    log "–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ"
    
    if [ "$DRY_RUN" = true ]; then
        echo ""
        warn "–¶–µ –±—É–≤ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–µ–∑ --dry-run"
    fi
    
    echo ""
    log "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:"
    echo "  1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å ./tools/scripts/check_newspaper_ids.sh –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
    echo "  2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–∞–π–ª–∏ –≤—Å–µ —â–µ –ø—Ä–∞—Ü—é—é—Ç—å"
    echo "  3. –ó—Ä–æ–±—ñ—Ç—å backup –ø–µ—Ä–µ–¥ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
main "$@" 