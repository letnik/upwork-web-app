#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–µ—Ä—Å—ñ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π –ø—Ä–æ–µ–∫—Ç—É
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./check_versions.sh

set -e

echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π –ø—Ä–æ–µ–∫—Ç—É Upwork AI Assistant"
echo "=========================================================="

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–µ—Ä—Å—ñ—ó
check_version() {
    local name=$1
    local current_version=$2
    local required_version=$3
    
    echo -n "üì¶ $name: "
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sort -V –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–µ—Ä—Å—ñ–π
    if printf '%s\n' "$required_version" "$current_version" | sort -V | head -n1 | grep -q "$required_version"; then
        echo -e "${GREEN}‚úÖ $current_version${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $current_version (–ø–æ—Ç—Ä—ñ–±–Ω–æ: $required_version)${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–º–∞–Ω–¥–∏
check_command() {
    local command=$1
    local name=$2
    
    if command -v $command &> /dev/null; then
        echo -e "${GREEN}‚úÖ $name –∑–Ω–∞–π–¥–µ–Ω–æ${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $name –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ${NC}"
        return 1
    fi
}

echo ""
echo "üêç Python –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞:"
python_version=$("/opt/homebrew/bin/python3.11" --version 2>&1 | cut -d' ' -f2)
check_version "Python" "$python_version" "3.11"

echo ""
echo "üü¢ Node.js –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞:"
node_version=$(node --version 2>&1 | cut -d'v' -f2)
check_version "Node.js" "$node_version" "18.0.0"

echo ""
echo "üì¶ npm –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞:"
npm_version=$(npm --version 2>&1)
check_version "npm" "$npm_version" "9.0"

echo ""
echo "üê≥ Docker –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞:"
if command -v docker &> /dev/null; then
    docker_version=$(docker --version 2>&1 | cut -d' ' -f3 | cut -d',' -f1)
    echo -e "${GREEN}‚úÖ Docker: $docker_version${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Docker –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ${NC}"
fi

echo ""
echo "üê≥ Docker Compose –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞:"
if command -v docker-compose &> /dev/null; then
    compose_version=$(docker-compose --version 2>&1 | cut -d' ' -f3 | cut -d',' -f1)
    echo -e "${GREEN}‚úÖ Docker Compose: $compose_version${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Docker Compose –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ${NC}"
fi

echo ""
echo "üìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É:"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–∞–ø–æ–∫
required_dirs=(
    "app/backend/services/auth-service"
    "app/backend/services/upwork-service"
    "app/backend/services/ai-service"
    "app/backend/services/analytics-service"
    "app/backend/services/notification-service"
    "app/frontend/src"
    "tests/unit/backend"
    "tests/unit/frontend"
    "requirements"
    "docker"
)

for dir in "${required_dirs[@]}"; do
    if [ -d "$dir" ]; then
        echo -e "${GREEN}‚úÖ $dir${NC}"
    else
        echo -e "${RED}‚ùå $dir –≤—ñ–¥—Å—É—Ç–Ω—ñ–π${NC}"
    fi
done

echo ""
echo "üìÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤:"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
required_files=(
    "requirements/base.txt"
    "requirements/auth-service.txt"
    "requirements/ai-service.txt"
    "requirements/analytics-service.txt"
    "app/frontend/package.json"
    "docker/docker-compose.yml"
    "package.json"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $file${NC}"
    else
        echo -e "${RED}‚ùå $file –≤—ñ–¥—Å—É—Ç–Ω—ñ–π${NC}"
    fi
done

echo ""
echo "üß™ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç—ñ–≤:"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç—ñ–≤
test_files=(
    "tests/unit/backend/test_models.py"
    "tests/unit/frontend/App.test.tsx"
    "tests/unit/backend/conftest.py"
)

for file in "${test_files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $file${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è $file –≤—ñ–¥—Å—É—Ç–Ω—ñ–π${NC}"
    fi
done

echo ""
echo "üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π:"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
config_files=(
    "app/backend/shared/config/settings.py"
    "app/backend/shared/config/logging.py"
    "app/frontend/tsconfig.json"
    "app/frontend/jest.config.js"
)

for file in "${config_files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $file${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è $file –≤—ñ–¥—Å—É—Ç–Ω—ñ–π${NC}"
    fi
done

echo ""
echo "üìä –ü—ñ–¥—Å—É–º–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:"

# –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–±–ª–µ–º
issues=0
warnings=0

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python –≤–µ—Ä—Å—ñ—ó
if [[ "$python_version" < "3.11" ]]; then
    ((issues++))
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
if ! command -v node &> /dev/null; then
    ((issues++))
fi

if ! command -v npm &> /dev/null; then
    ((issues++))
fi

echo -e "${YELLOW}‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: $warnings${NC}"
echo -e "${RED}‚ùå –ü—Ä–æ–±–ª–µ–º: $issues${NC}"

if [ $issues -eq 0 ]; then
    echo -e "${GREEN}üéâ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!${NC}"
    exit 0
else
    echo -e "${RED}‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è${NC}"
    exit 1
fi 