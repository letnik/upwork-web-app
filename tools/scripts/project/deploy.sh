#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è Upwork AI Assistant
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./deploy.sh [local|dev|staging|production]

set -e

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—ó –ª–æ–≥—É–≤–∞–Ω–Ω—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
if [ $# -eq 0 ]; then
    log_error "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [local|dev|staging|production]"
    exit 1
fi

ENVIRONMENT=$1

# –§—É–Ω–∫—Ü—ñ—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
deploy_local() {
    log_info "üè† –õ–æ–∫–∞–ª—å–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        exit 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker Compose
    if ! command -v docker compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        exit 1
    fi
    
    # –ó—É–ø–∏–Ω–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    log_info "üõë –ó—É–ø–∏–Ω–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
    docker compose -f docker/docker-compose.yml down 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    log_info "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
    docker compose -f docker/docker-compose.yml up -d
    
    # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—ñ–≤
    log_info "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    sleep 10
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
    log_info "üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    docker compose -f docker/docker-compose.yml ps
    
    log_success "‚úÖ –õ–æ–∫–∞–ª—å–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    log_info "üåê Frontend: http://localhost:3000"
    log_info "üîå Backend API: http://localhost:8000"
    log_info "üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: http://localhost:8000/docs"
}

# –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Ä–æ–±–∫–∏ (–±–µ–∑ Docker)
deploy_dev() {
    log_info "üîß –†–æ–∑—Ä–æ–±–∫–∞ (–ª–æ–∫–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫)..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—é—Ç—å –ø–∞–ø–∫–∏
    if [ ! -d "app/backend" ]; then
        log_error "–ü–∞–ø–∫–∞ app/backend –Ω–µ —ñ—Å–Ω—É—î!"
        exit 1
    fi
    
    if [ ! -d "app/frontend" ]; then
        log_error "–ü–∞–ø–∫–∞ app/frontend –Ω–µ —ñ—Å–Ω—É—î!"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫ —Ç—ñ–ª—å–∫–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ Redis
    log_info "üê≥ –ó–∞–ø—É—Å–∫ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ Redis..."
    docker compose -f docker/docker-compose.yml up -d postgres redis
    
    # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
    log_success "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ç–∞ Redis –∑–∞–ø—É—â–µ–Ω—ñ!"
    log_info "üìù –î–ª—è –ø–æ–≤–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –≤ –æ–∫—Ä–µ–º–∏—Ö —Ç–µ—Ä–º—ñ–Ω–∞–ª–∞—Ö:"
    log_info "   –¢–µ—Ä–º—ñ–Ω–∞–ª 1: cd app/backend && uvicorn src.main:app --reload"
    log_info "   –¢–µ—Ä–º—ñ–Ω–∞–ª 2: cd app/frontend && npm start"
    log_info "üåê Frontend –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π: http://localhost:3000"
    log_info "üîå Backend API –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π: http://localhost:8000"
}

# –§—É–Ω–∫—Ü—ñ—è staging —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
deploy_staging() {
    log_info "üß™ Staging —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if [ ! -f ".env.staging" ]; then
        log_error "–§–∞–π–ª .env.staging –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
        exit 1
    fi
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    export $(cat .env.staging | xargs)
    
    # –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —á–µ—Ä–µ–∑ docker-compose
    docker compose -f docker/docker-compose.staging.yml up -d
    
    log_success "‚úÖ Staging —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –§—É–Ω–∫—Ü—ñ—è production —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
deploy_production() {
    log_info "üè≠ Production —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–∏ –≤ production —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ
    if [ "$ENVIRONMENT" != "production" ]; then
        log_warning "‚ö†Ô∏è –£–≤–∞–≥–∞! –í–∏ —Ä–æ–∑–≥–æ—Ä—Ç–∞—î—Ç–µ –≤ production —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ!"
        read -p "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "–†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
            exit 0
        fi
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if [ ! -f ".env.production" ]; then
        log_error "–§–∞–π–ª .env.production –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
        exit 1
    fi
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    export $(cat .env.production | xargs)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup –ø–µ—Ä–µ–¥ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è–º
    log_info "üíæ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup..."
    ./scripts/backup.sh
    
    # –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —á–µ—Ä–µ–∑ docker-compose
    docker compose -f docker/docker-compose.production.yml up -d
    
    log_success "‚úÖ Production —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –û—Å–Ω–æ–≤–Ω–∏–π –±–ª–æ–∫
case $ENVIRONMENT in
    "local")
        deploy_local
        ;;
    "dev")
        deploy_dev
        ;;
    "staging")
        deploy_staging
        ;;
    "production")
        deploy_production
        ;;
    *)
        log_error "–ù–µ–≤—ñ–¥–æ–º–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ: $ENVIRONMENT"
        log_error "–î–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó: local, dev, staging, production"
        exit 1
        ;;
esac

# –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è
cleanup() {
    log_info "üßπ –û—á–∏—â–µ–Ω–Ω—è..."
    docker compose -f docker/docker-compose.yml down
    log_success "‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤
trap cleanup EXIT 
# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
health_check() {
    log_info "üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ backend
    if curl -f http://localhost:8000/health > /dev/null 2>&1; then
        log_success "‚úÖ Backend –ø—Ä–∞—Ü—é—î"
    else
        log_error "‚ùå Backend –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î"
        return 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ frontend
    if curl -f http://localhost:3000 > /dev/null 2>&1; then
        log_success "‚úÖ Frontend –ø—Ä–∞—Ü—é—î"
    else
        log_error "‚ùå Frontend –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î"
        return 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    if docker exec upwork-postgres pg_isready > /dev/null 2>&1; then
        log_success "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—Ä–∞—Ü—é—î"
    else
        log_error "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î"
        return 1
    fi
    
    log_success "üéâ –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ!"
}

# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–∫–∞—Ç—É
rollback() {
    log_warning "üîÑ –í—ñ–¥–∫–∞—Ç –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó..."
    
    # –ó—É–ø–∏–Ω–∫–∞ –ø–æ—Ç–æ—á–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    docker-compose down
    
    # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ backup
    if [ -f "backup-latest.tar.gz" ]; then
        log_info "üì¶ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ backup..."
        tar -xzf backup-latest.tar.gz
        log_success "‚úÖ –í—ñ–¥–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    else
        log_error "‚ùå Backup –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
        exit 1
    fi
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    log_info "üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è Upwork AI Assistant..."
    
    case "${1:-local}" in
        "local")
            deploy_local
            health_check
            ;;
        "dev")
            deploy_dev
            ;;
        "staging")
            deploy_staging
            health_check
            ;;
        "production")
            deploy_production
            health_check
            ;;
        "rollback")
            rollback
            ;;
        "health")
            health_check
            ;;
        *)
            log_error "–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
            echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [local|dev|staging|production|rollback|health]"
            exit 1
            ;;
    esac
    
    log_success "üéâ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
}

# –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
main "$@" 