#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Python 3.11 —É –≤—Å—ñ—Ö —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç—É
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./check_python_version_usage.sh

set -e

echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Python 3.11 —É –≤—Å—ñ—Ö —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç—É"
echo "============================================================="

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–∞–π–ª—ñ–≤
check_file() {
    local file=$1
    local pattern=$2
    local description=$3
    
    if [ -f "$file" ]; then
        if grep -q "$pattern" "$file"; then
            echo -e "${RED}‚ùå $file - $description${NC}"
            return 1
        else
            echo -e "${GREEN}‚úÖ $file - $description${NC}"
            return 0
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è $file - —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ${NC}"
        return 0
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
check_correct_usage() {
    local file=$1
    local pattern=$2
    local description=$3
    
    if [ -f "$file" ]; then
        if grep -q "$pattern" "$file"; then
            echo -e "${GREEN}‚úÖ $file - $description${NC}"
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è $file - $description (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è $file - —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ${NC}"
        return 0
    fi
}

echo ""
echo "üêç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Python 3.11:"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ package.json
check_correct_usage "package.json" "python3.11" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î python3.11"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É
check_correct_usage "tools/scripts/project/start_project.sh" "python3.11" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î python3.11"
check_correct_usage "tools/scripts/project/migrate.sh" "python3.11" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î python3.11"
check_correct_usage "tools/scripts/project/manage.sh" "python3.11" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î python3.11"
check_correct_usage "tools/scripts/project/upgrade_python.sh" "python3.11" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î python3.11"

echo ""
echo "üö´ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ Python 3.9:"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å
check_file "package.json" "python3 -m pytest" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î python3 –∑–∞–º—ñ—Å—Ç—å python3.11"
check_file "tools/scripts/project/start_project.sh" "python3 -m venv" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î python3 –∑–∞–º—ñ—Å—Ç—å python3.11"
check_file "tools/scripts/project/migrate.sh" "python3 -m venv" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î python3 –∑–∞–º—ñ—Å—Ç—å python3.11"
check_file "tools/scripts/project/manage.sh" "python3 -m venv" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î python3 –∑–∞–º—ñ—Å—Ç—å python3.11"

echo ""
echo "üê≥ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker —Ñ–∞–π–ª—ñ–≤:"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker —Ñ–∞–π–ª—ñ–≤
check_correct_usage "app/backend/api-gateway/Dockerfile" "FROM python:3.11" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Python 3.11"
check_correct_usage "app/backend/services/auth-service/Dockerfile" "FROM python:3.11" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Python 3.11"
check_correct_usage "app/backend/services/upwork-service/Dockerfile" "FROM python:3.11" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Python 3.11"
check_correct_usage "app/backend/services/ai-service/Dockerfile" "FROM python:3.11" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Python 3.11"
check_correct_usage "app/backend/services/analytics-service/Dockerfile" "FROM python:3.11" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Python 3.11"
check_correct_usage "app/backend/services/notification-service/Dockerfile" "FROM python:3.11" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Python 3.11"

echo ""
echo "üìö –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó:"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
check_correct_usage "README.md" "Python 3.11" "–∑–≥–∞–¥—É—î Python 3.11"
check_correct_usage "docs/planning/README.md" "Python 3.11" "–∑–≥–∞–¥—É—î Python 3.11"
check_correct_usage "docs/planning/ARCHITECTURE.md" "Python 3.11" "–∑–≥–∞–¥—É—î Python 3.11"

echo ""
echo "üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CI/CD:"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CI/CD
check_correct_usage ".github/workflows/test.yml" "Python 3.11" "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Python 3.11"

echo ""
echo "üìä –ü—ñ–¥—Å—É–º–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:"

# –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
total_files=0
correct_files=0
incorrect_files=0

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö Python —Ñ–∞–π–ª—ñ–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è python3 –∑–∞–º—ñ—Å—Ç—å python3.11
echo ""
echo "üîç –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python —Ñ–∞–π–ª—ñ–≤:"

# –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Python
find . -name "*.py" -o -name "*.sh" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" -o -name "*.md" | grep -v ".git" | grep -v "node_modules" | while read -r file; do
    if grep -l "python3 -m" "$file" > /dev/null 2>&1; then
        echo -e "${RED}‚ùå $file - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î python3 –∑–∞–º—ñ—Å—Ç—å python3.11${NC}"
        ((incorrect_files++))
    elif grep -l "python3.11" "$file" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ $file - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î python3.11${NC}"
        ((correct_files++))
    fi
    ((total_files++))
done

echo ""
echo "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
echo -e "${GREEN}‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤: $correct_files${NC}"
echo -e "${RED}‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤: $incorrect_files${NC}"
echo -e "${BLUE}üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: $total_files${NC}"

if [ $incorrect_files -eq 0 ]; then
    echo -e "${GREEN}üéâ –í—Å—ñ —Ñ–∞–π–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å Python 3.11!${NC}"
    exit 0
else
    echo -e "${RED}‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–∏, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ Python 3.11${NC}"
    exit 1
fi 