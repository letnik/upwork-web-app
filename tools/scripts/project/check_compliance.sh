#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./tools/scripts/project/check_compliance.sh

set -e

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–≤–æ–¥—É
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# –ó–º—ñ–Ω–Ω—ñ
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../../.." && pwd)"
TOTAL_ISSUES=0

echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º..."
echo "üìÅ –ü—Ä–æ–µ–∫—Ç: $PROJECT_ROOT"
echo ""

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É
check_structure() {
    log "üìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É..."
    
    if [ -f "$PROJECT_ROOT/tools/scripts/project/validate_structure.sh" ]; then
        cd "$PROJECT_ROOT"
        if ./tools/scripts/project/validate_structure.sh; then
            success "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É - OK"
        else
            error "‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"
            TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
        fi
    else
        error "‚ùå –°–∫—Ä–∏–ø—Ç validate_structure.sh –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
    fi
    echo ""
}

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ID –≤ newspaper
check_newspaper_ids() {
    log "üì∞ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ID –≤ newspaper..."
    
    if [ -f "$PROJECT_ROOT/tools/scripts/documentation/check_newspaper_ids.sh" ]; then
        cd "$PROJECT_ROOT"
        if ./tools/scripts/documentation/check_newspaper_ids.sh; then
            success "‚úÖ ID –≤ newspaper - OK"
        else
            error "‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ ID –≤ newspaper"
            TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
        fi
    else
        error "‚ùå –°–∫—Ä–∏–ø—Ç check_newspaper_ids.sh –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
    fi
    echo ""
}

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ—Å—Ç—ñ–≤
check_tests() {
    log "üß™ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç—ñ–≤..."
    
    if [ -f "$PROJECT_ROOT/tools/scripts/testing/run_tests.sh" ]; then
        cd "$PROJECT_ROOT"
        if ./tools/scripts/testing/run_tests.sh; then
            success "‚úÖ –¢–µ—Å—Ç–∏ - OK"
        else
            warn "‚ö†Ô∏è –¢–µ—Å—Ç–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏"
            TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
        fi
    else
        warn "‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç run_tests.sh –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
    fi
    echo ""
}

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–µ—Ä—Å—ñ—ó
check_version() {
    log "üì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó –ø—Ä–æ–µ–∫—Ç—É..."
    
    if [ -f "$PROJECT_ROOT/VERSION" ]; then
        VERSION=$(cat "$PROJECT_ROOT/VERSION")
        info "üìã –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è: $VERSION"
        success "‚úÖ –§–∞–π–ª VERSION —ñ—Å–Ω—É—î"
    else
        error "‚ùå –§–∞–π–ª VERSION –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
    fi
    echo ""
}

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ .gitignore
check_gitignore() {
    log "üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .gitignore..."
    
    if [ -f "$PROJECT_ROOT/.gitignore" ]; then
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª
        if grep -q "logs/" "$PROJECT_ROOT/.gitignore" && \
           grep -q "exports/" "$PROJECT_ROOT/.gitignore" && \
           grep -q "sessions/" "$PROJECT_ROOT/.gitignore" && \
           grep -q "\*.log" "$PROJECT_ROOT/.gitignore"; then
            success "‚úÖ .gitignore –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞"
        else
            error "‚ùå .gitignore –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ—Ö –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª"
            TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
        fi
    else
        error "‚ùå –§–∞–π–ª .gitignore –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
    fi
    echo ""
}

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
check_dependencies() {
    log "üì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
    
    if [ -d "$PROJECT_ROOT/requirements" ]; then
        success "‚úÖ –ü–∞–ø–∫–∞ requirements —ñ—Å–Ω—É—î"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        if [ -f "$PROJECT_ROOT/requirements/base.txt" ]; then
            success "‚úÖ requirements/base.txt —ñ—Å–Ω—É—î"
        else
            error "‚ùå requirements/base.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
        fi
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
        SERVICES=("api-gateway" "auth-service" "ai-service" "analytics-service" "notification-service" "upwork-service")
        for service in "${SERVICES[@]}"; do
            if [ -f "$PROJECT_ROOT/requirements/$service.txt" ]; then
                success "‚úÖ requirements/$service.txt —ñ—Å–Ω—É—î"
            else
                warn "‚ö†Ô∏è requirements/$service.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            fi
        done
    else
        error "‚ùå –ü–∞–ø–∫–∞ requirements –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
        TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
    fi
    echo ""
}

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
check_documentation() {
    log "üìö –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π
    CRITICAL_FILES=(
        "docs/instruction_ai/AI_ASSISTANT_INSTRUCTIONS.md"
        "docs/instruction_ai/NEWSPAPER_ID_MANAGEMENT_INSTRUCTIONS.md"
        "docs/instruction_ai/COMPLIANCE_RULES.md"
        "docs/instruction_ai/WORKFLOW_INSTRUCTIONS.md"
    )
    
    for file in "${CRITICAL_FILES[@]}"; do
        if [ -f "$PROJECT_ROOT/$file" ]; then
            success "‚úÖ $file —ñ—Å–Ω—É—î"
        else
            error "‚ùå $file –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
        fi
    done
    echo ""
}

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∫—Ä–∏–ø—Ç—ñ–≤
check_scripts() {
    log "üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç—ñ–≤..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤
    CRITICAL_SCRIPTS=(
        "tools/scripts/project/validate_structure.sh"
        "tools/scripts/documentation/check_newspaper_ids.sh"
        "tools/scripts/documentation/create_newspaper_file.sh"
        "tools/scripts/documentation/get_next_newspaper_id.sh"
        "tools/scripts/dependencies/install.sh"
    )
    
    for script in "${CRITICAL_SCRIPTS[@]}"; do
        if [ -f "$PROJECT_ROOT/$script" ]; then
            if [ -x "$PROJECT_ROOT/$script" ]; then
                success "‚úÖ $script —ñ—Å–Ω—É—î —Ç–∞ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π"
            else
                warn "‚ö†Ô∏è $script —ñ—Å–Ω—É—î, –∞–ª–µ –Ω–µ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π"
                TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
            fi
        else
            error "‚ùå $script –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
        fi
    done
    echo ""
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    echo "üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º..."
    echo "=================================================="
    echo ""
    
    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
    check_structure
    check_newspaper_ids
    check_tests
    check_version
    check_gitignore
    check_dependencies
    check_documentation
    check_scripts
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    echo "=================================================="
    echo "üìä –ü–Ü–î–°–£–ú–û–ö –ü–ï–†–ï–í–Ü–†–ö–ò:"
    echo ""
    
    if [ "$TOTAL_ISSUES" -eq 0 ]; then
        success "üéâ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!"
        success "‚úÖ –ü—Ä–æ–µ–∫—Ç –ø–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º"
        exit 0
    else
        error "‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ $TOTAL_ISSUES –ø—Ä–æ–±–ª–µ–º"
        warn "‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è–º"
        echo ""
        echo "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:"
        echo "1. –í–∏–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ –≤–∏—è–≤–ª–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏"
        echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —â–µ —Ä–∞–∑"
        echo "3. –î–æ–∫—É–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–∏"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
main "$@" 