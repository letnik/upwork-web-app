#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É
# –í–∏—è–≤–ª—è—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ Dockerfile, —ñ–º–ø–æ—Ä—Ç–∞–º–∏, —Ñ–∞–π–ª–∞–º–∏ –∫–µ—à—É —Ç–∞ —ñ–Ω—à–µ

set -e

echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É..."

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –ø–æ–º–∏–ª–æ–∫
error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É —É—Å–ø—ñ—Ö—É
success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ CMD –≤ Dockerfile
echo "üìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Dockerfile –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏ CMD..."
dockerfile_issues=0

for dockerfile in $(find . -name "Dockerfile" -not -path "./docs/*" -not -path "./node_modules/*" -not -path "./app/frontend/node_modules/*" -not -path "./app/backend/venv/*" -not -path "./.venv/*"); do
    cmd_count=$(grep -c "CMD" "$dockerfile" || echo "0")
    if [ "$cmd_count" -gt 1 ]; then
        error "–î—É–±–ª—ñ–∫–∞—Ç CMD –≤ $dockerfile ($cmd_count –∑–Ω–∞–π–¥–µ–Ω–æ)"
        dockerfile_issues=$((dockerfile_issues + 1))
    else
        success "Dockerfile $dockerfile - OK"
    fi
done

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ—ñ—Å–Ω—É—é—á–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –≤ –Ω–∞—à–æ–º—É –∫–æ–¥—ñ)
echo "üìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤..."
import_issues=0

# –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞—à—ñ Python —Ñ–∞–π–ª–∏, –≤–∏–∫–ª—é—á–∞—é—á–∏ venv —Ç–∞ node_modules
for py_file in $(find . -name "*.py" -not -path "./docs/*" -not -path "./app/backend/venv/*" -not -path "./.venv/*" -not -path "./.venv_python311/*" -not -path "./tools/.venv/*" -not -path "./node_modules/*" -not -path "./app/frontend/node_modules/*" | grep -E "(app/|tests/)"); do
    while IFS= read -r line; do
        if [[ $line =~ ^from\ \.([a-zA-Z_]+)\ import ]]; then
            module_name="${BASH_REMATCH[1]}"
            module_file="$(dirname "$py_file")/${module_name}.py"
            if [ ! -f "$module_file" ]; then
                error "–ù–µ—ñ—Å–Ω—É—é—á–∏–π —ñ–º–ø–æ—Ä—Ç: $line –≤ $py_file"
                import_issues=$((import_issues + 1))
            fi
        fi
    done < "$py_file"
done

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –∫–µ—à—É (—Ç—ñ–ª—å–∫–∏ –≤ –Ω–∞—à–æ–º—É –∫–æ–¥—ñ)
echo "üìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –∫–µ—à—É..."
cache_issues=0

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ .coverage —Ç–∞ .pytest_cache –≤ –Ω–∞—à–æ–º—É –∫–æ–¥—ñ
if find . -name ".coverage" -not -path "./docs/*" -not -path "./node_modules/*" -not -path "./app/frontend/node_modules/*" -not -path "./app/backend/venv/*" -not -path "./.venv/*" -not -path "./.venv_python311/*" -not -path "./tools/.venv/*" | grep -q .; then
    error "–ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–∏ –∫–µ—à—É: .coverage"
    cache_issues=$((cache_issues + 1))
else
    success "–§–∞–π–ª–∏ –∫–µ—à—É .coverage - OK"
fi

if find . -name ".pytest_cache" -type d -not -path "./docs/*" -not -path "./node_modules/*" -not -path "./app/frontend/node_modules/*" -not -path "./app/backend/venv/*" -not -path "./.venv/*" -not -path "./.venv_python311/*" -not -path "./tools/.venv/*" | grep -q .; then
    error "–ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–∏ –∫–µ—à—É: .pytest_cache"
    cache_issues=$((cache_issues + 1))
else
    success "–§–∞–π–ª–∏ –∫–µ—à—É .pytest_cache - OK"
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ñ–∞–π–ª—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –≤ –Ω–∞—à–æ–º—É –∫–æ–¥—ñ)
echo "üìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ñ–∞–π–ª—ñ–≤..."
empty_issues=0

for file in $(find . -type f -size 0 -not -path "./docs/*" -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./app/frontend/node_modules/*" -not -path "./app/backend/venv/*" -not -path "./.venv/*" -not -path "./.venv_python311/*" -not -path "./tools/.venv/*" | grep -E "(app/|tests/)"); do
    if [[ "$file" != *".gitkeep"* ]]; then
        warning "–ü–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª: $file"
        empty_issues=$((empty_issues + 1))
    fi
done

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .gitignore –ø—Ä–∞–≤–∏–ª
echo "üìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .gitignore..."
gitignore_issues=0

required_patterns=("logs/" "exports/" "sessions/" "*.log")
for pattern in "${required_patterns[@]}"; do
    if ! grep -q "$pattern" .gitignore; then
        warning "–í—ñ–¥—Å—É—Ç–Ω—î –ø—Ä–∞–≤–∏–ª–æ –≤ .gitignore: $pattern"
        gitignore_issues=$((gitignore_issues + 1))
    else
        success ".gitignore –º—ñ—Å—Ç–∏—Ç—å: $pattern"
    fi
done

# –ü—ñ–¥—Å—É–º–æ–∫
echo ""
echo "üìä –ü–Ü–î–°–£–ú–û–ö –ü–ï–†–ï–í–Ü–†–ö–ò:"
echo "======================"

if [ $dockerfile_issues -eq 0 ] && [ $import_issues -eq 0 ] && [ $cache_issues -eq 0 ] && [ $empty_issues -eq 0 ] && [ $gitignore_issues -eq 0 ]; then
    success "–í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ! üéâ"
    exit 0
else
    echo ""
    echo "–ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º:"
    [ $dockerfile_issues -gt 0 ] && error "Dockerfile –ø—Ä–æ–±–ª–µ–º: $dockerfile_issues"
    [ $import_issues -gt 0 ] && error "–ü—Ä–æ–±–ª–µ–º –∑ —ñ–º–ø–æ—Ä—Ç–∞–º–∏: $import_issues"
    [ $cache_issues -gt 0 ] && error "–§–∞–π–ª—ñ–≤ –∫–µ—à—É: $cache_issues"
    [ $empty_issues -gt 0 ] && warning "–ü–æ—Ä–æ–∂–Ω—ñ—Ö —Ñ–∞–π–ª—ñ–≤: $empty_issues"
    [ $gitignore_issues -gt 0 ] && warning "–ü—Ä–æ–±–ª–µ–º –∑ .gitignore: $gitignore_issues"
    echo ""
    error "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è!"
    exit 1
fi 