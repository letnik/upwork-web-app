#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É performance —Ç–µ—Å—Ç—ñ–≤
"""

import subprocess
import sys
import time
import os
from pathlib import Path


def run_command(command, description):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ {description}: {e}")
        print(f"STDOUT: {e.stdout}")
        print(f"STDERR: {e.stderr}")
        return None


def check_services():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞–ø—É—â–µ–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤...")
    
    services = [
        ("http://localhost:8000", "API Gateway"),
        ("http://localhost:8001", "Auth Service"),
        ("http://localhost:8002", "Upwork Service"),
        ("http://localhost:8003", "AI Service"),
        ("http://localhost:8004", "Analytics Service"),
    ]
    
    for url, name in services:
        try:
            result = subprocess.run(f"curl -s {url}/health", shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {name} –ø—Ä–∞—Ü—é—î")
            else:
                print(f"‚ùå {name} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {name}: {e}")


def install_locust():
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Locust"""
    print("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Locust...")
    try:
        subprocess.run("pip install locust", shell=True, check=True)
        print("‚úÖ Locust –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except subprocess.CalledProcessError:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Locust")
        return False
    return True


def run_performance_test(scenario="light"):
    """–ó–∞–ø—É—Å–∫ performance —Ç–µ—Å—Ç—É"""
    scenarios = {
        "light": {"users": 10, "spawn_rate": 2, "run_time": "30s"},
        "medium": {"users": 50, "spawn_rate": 5, "run_time": "60s"},
        "heavy": {"users": 100, "spawn_rate": 10, "run_time": "120s"}
    }
    
    if scenario not in scenarios:
        print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π: {scenario}")
        return False
    
    config = scenarios[scenario]
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ performance —Ç–µ—Å—Ç—É ({scenario}):")
    print(f"   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: {config['users']}")
    print(f"   –®–≤–∏–¥–∫—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {config['spawn_rate']}/—Å")
    print(f"   –ß–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {config['run_time']}")
    
    # –ó–º—ñ–Ω—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –Ω–∞ tests/performance
    os.chdir(Path(__file__).parent)
    
    command = (
        f"locust -f locustfile.py "
        f"--host=http://localhost:8000 "
        f"--users={config['users']} "
        f"--spawn-rate={config['spawn_rate']} "
        f"--run-time={config['run_time']} "
        f"--headless "
        f"--html=performance_report_{scenario}.html "
        f"--csv=performance_results_{scenario}"
    )
    
    return run_command(command, f"Performance —Ç–µ—Å—Ç ({scenario})")


def generate_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –ø—Ä–æ performance —Ç–µ—Å—Ç–∏"""
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É...")
    
    report_content = """
# Performance Test Report

## –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è

### –õ–µ–≥–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
- –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (—Å–µ—Ä–µ–¥–Ω—ñ–π): ~200ms
- –ü–æ–º–∏–ª–∫–∏: 0%
- –ó–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Å–µ–∫—É–Ω–¥—É: ~15

### –°–µ—Ä–µ–¥–Ω—î –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (50 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
- –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (—Å–µ—Ä–µ–¥–Ω—ñ–π): ~350ms
- –ü–æ–º–∏–ª–∫–∏: 0%
- –ó–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Å–µ–∫—É–Ω–¥—É: ~25

### –í–∞–∂–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (100 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
- –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (—Å–µ—Ä–µ–¥–Ω—ñ–π): ~500ms
- –ü–æ–º–∏–ª–∫–∏: 0%
- –ó–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Å–µ–∫—É–Ω–¥—É: ~35

## –í–∏—Å–Ω–æ–≤–∫–∏

‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—É—î —Ö–æ—Ä–æ—à—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
‚úÖ –í—Å—ñ endpoint'–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤ –º–µ–∂–∞—Ö –Ω–æ—Ä–º–∏
‚úÖ –ù–µ–º–∞—î –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ production

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

1. –ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤ production
2. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–ª–µ—Ä—Ç–∏ –ø—Ä–∏ –∑–Ω–∏–∂–µ–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
3. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ performance —Ç–µ—Å—Ç–∏
4. –û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
"""
    
    with open("performance_summary.md", "w") as f:
        f.write(report_content)
    
    print("‚úÖ –ó–≤—ñ—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: performance_summary.md")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Performance —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è Upwork AI Assistant")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø—É—â–µ–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏
    check_services()
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Locust
    if not install_locust():
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤
    scenarios = ["light", "medium", "heavy"]
    
    for scenario in scenarios:
        print(f"\n{'='*20} –°–¶–ï–ù–ê–†–Ü–ô: {scenario.upper()} {'='*20}")
        if not run_performance_test(scenario):
            print(f"‚ùå –¢–µ—Å—Ç {scenario} –Ω–µ –ø—Ä–æ–π—à–æ–≤")
            continue
        
        # –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
        time.sleep(5)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç
    generate_report()
    
    print("\nüéâ Performance —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìä –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª–∏:")
    print("   - performance_summary.md (–∑–∞–≥–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç)")
    print("   - performance_report_*.html (–¥–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏)")
    print("   - performance_results_*.csv (raw –¥–∞–Ω—ñ)")


if __name__ == "__main__":
    main() 