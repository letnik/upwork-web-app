"""
–°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
"""

import time
import psutil
import os
import json
from datetime import datetime
from typing import Dict, List, Any
import pytest


class TestMetrics:
    """–ö–ª–∞—Å –¥–ª—è –∑–±–æ—Ä—É –º–µ—Ç—Ä–∏–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    
    def __init__(self):
        self.start_time = None
        self.end_time = None
        self.memory_before = None
        self.memory_after = None
        self.cpu_before = None
        self.cpu_after = None
        self.test_results = []
        self.coverage_data = {}
        self.performance_data = {}
        self.security_data = {}
    
    def start_test_session(self):
        """–ü–æ—á–∞—Ç–æ–∫ —Å–µ—Å—ñ—ó —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        self.start_time = time.time()
        self.memory_before = psutil.Process().memory_info().rss
        self.cpu_before = psutil.cpu_percent()
        
        print(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    def end_test_session(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        self.end_time = time.time()
        self.memory_after = psutil.Process().memory_info().rss
        self.cpu_after = psutil.cpu_percent()
        
        execution_time = self.end_time - self.start_time
        memory_used = self.memory_after - self.memory_before
        
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚è±Ô∏è  –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üíæ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ø–∞–º'—è—Ç—ñ: {memory_used / 1024 / 1024:.2f} MB")
        print(f"üñ•Ô∏è  CPU –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {self.cpu_after:.1f}%")
    
    def record_test_result(self, test_name: str, status: str, duration: float, error: str = None):
        """–ó–∞–ø–∏—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç–µ—Å—Ç—É"""
        result = {
            "test_name": test_name,
            "status": status,
            "duration": duration,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
    
    def record_coverage(self, module: str, coverage_percentage: float, lines_covered: int, total_lines: int):
        """–ó–∞–ø–∏—Å –¥–∞–Ω–∏—Ö –ø–æ–∫—Ä–∏—Ç—Ç—è"""
        self.coverage_data[module] = {
            "coverage_percentage": coverage_percentage,
            "lines_covered": lines_covered,
            "total_lines": total_lines,
            "timestamp": datetime.now().isoformat()
        }
    
    def record_performance_metric(self, metric_name: str, value: float, unit: str = ""):
        """–ó–∞–ø–∏—Å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        if metric_name not in self.performance_data:
            self.performance_data[metric_name] = []
        
        self.performance_data[metric_name].append({
            "value": value,
            "unit": unit,
            "timestamp": datetime.now().isoformat()
        })
    
    def record_security_issue(self, issue_type: str, severity: str, description: str, location: str = ""):
        """–ó–∞–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏ –±–µ–∑–ø–µ–∫–∏"""
        if issue_type not in self.security_data:
            self.security_data[issue_type] = []
        
        self.security_data[issue_type].append({
            "severity": severity,
            "description": description,
            "location": location,
            "timestamp": datetime.now().isoformat()
        })
    
    def generate_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –∑ –º–µ—Ç—Ä–∏–∫"""
        if not self.start_time or not self.end_time:
            raise ValueError("–¢–µ—Å—Ç–æ–≤–∞ —Å–µ—Å—ñ—è –Ω–µ –±—É–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        
        execution_time = self.end_time - self.start_time
        memory_used = self.memory_after - self.memory_before if self.memory_after else 0
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç—ñ–≤
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["status"] == "passed"])
        failed_tests = len([r for r in self.test_results if r["status"] == "failed"])
        skipped_tests = len([r for r in self.test_results if r["status"] == "skipped"])
        
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        # –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç—É
        avg_test_duration = sum(r["duration"] for r in self.test_results) / total_tests if total_tests > 0 else 0
        
        # –°–µ—Ä–µ–¥–Ω—î –ø–æ–∫—Ä–∏—Ç—Ç—è –∫–æ–¥—É
        avg_coverage = sum(c["coverage_percentage"] for c in self.coverage_data.values()) / len(self.coverage_data) if self.coverage_data else 0
        
        report = {
            "session_info": {
                "start_time": datetime.fromtimestamp(self.start_time).isoformat(),
                "end_time": datetime.fromtimestamp(self.end_time).isoformat(),
                "execution_time_seconds": execution_time,
                "memory_used_mb": memory_used / 1024 / 1024,
                "cpu_usage_percent": self.cpu_after
            },
            "test_statistics": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "failed_tests": failed_tests,
                "skipped_tests": skipped_tests,
                "success_rate_percent": success_rate,
                "average_test_duration_seconds": avg_test_duration
            },
            "coverage_summary": {
                "average_coverage_percent": avg_coverage,
                "modules_covered": len(self.coverage_data),
                "detailed_coverage": self.coverage_data
            },
            "performance_summary": {
                "metrics_count": len(self.performance_data),
                "detailed_metrics": self.performance_data
            },
            "security_summary": {
                "issues_count": sum(len(issues) for issues in self.security_data.values()),
                "detailed_issues": self.security_data
            },
            "recommendations": self._generate_recommendations(
                success_rate, avg_coverage, execution_time, memory_used
            )
        }
        
        return report
    
    def _generate_recommendations(self, success_rate: float, coverage: float, execution_time: float, memory_used: int) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–µ—Ç—Ä–∏–∫"""
        recommendations = []
        
        if success_rate < 95:
            recommendations.append("üî¥ –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤ (–ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {:.1f}%)".format(success_rate))
        
        if coverage < 90:
            recommendations.append("üü° –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–±—ñ–ª—å—à–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è –∫–æ–¥—É (–ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {:.1f}%)".format(coverage))
        
        if execution_time > 300:  # 5 —Ö–≤–∏–ª–∏–Ω
            recommendations.append("üü° –¢–µ—Å—Ç–∏ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –¥–æ–≤–≥–æ ({} —Å–µ–∫). –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –ø–∞—Ä–∞–ª–µ–ª—ñ–∑–∞—Ü—ñ—é".format(execution_time))
        
        if memory_used > 500 * 1024 * 1024:  # 500MB
            recommendations.append("üü° –í–∏—Å–æ–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ ({} MB). –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞ –≤–∏—Ç–æ–∫–∏ –ø–∞–º'—è—Ç—ñ".format(memory_used / 1024 / 1024))
        
        if not recommendations:
            recommendations.append("‚úÖ –í—Å—ñ –º–µ—Ç—Ä–∏–∫–∏ –≤ –Ω–æ—Ä–º—ñ!")
        
        return recommendations
    
    def save_report(self, filename: str = None):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –≤ —Ñ–∞–π–ª"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"test-results/metrics_report_{timestamp}.json"
        
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        
        report = self.generate_report()
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üìä –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}")
        return filename


# Pytest hooks –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–±–æ—Ä—É –º–µ—Ç—Ä–∏–∫
_metrics = TestMetrics()

@pytest.hookimpl(tryfirst=True)
def pytest_sessionstart(session):
    """–ü–æ—á–∞—Ç–æ–∫ —Å–µ—Å—ñ—ó —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    _metrics.start_test_session()

@pytest.hookimpl(trylast=True)
def pytest_sessionfinish(session, exitstatus):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    _metrics.end_test_session()
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç
    try:
        report_file = _metrics.save_report()
        print(f"üìà –ú–µ—Ç—Ä–∏–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {report_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫: {e}")

@pytest.hookimpl(hookwrapper=True)
def pytest_runtest_makereport(item, call):
    """–ó–±—ñ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É"""
    start_time = time.time()
    
    # –í–∏–∫–æ–Ω—É—î–º–æ —Ç–µ—Å—Ç
    outcome = yield
    
    end_time = time.time()
    duration = end_time - start_time
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    report = outcome.get_result()
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
    status = report.outcome
    error = str(report.longrepr) if report.failed else None
    
    _metrics.record_test_result(
        test_name=item.name,
        status=status,
        duration=duration,
        error=error
    )


# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
def start_metrics_collection():
    """–ü–æ—á–∞—Ç–æ–∫ –∑–±–æ—Ä—É –º–µ—Ç—Ä–∏–∫"""
    _metrics.start_test_session()

def end_metrics_collection():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–±–æ—Ä—É –º–µ—Ç—Ä–∏–∫"""
    _metrics.end_test_session()

def record_coverage(module: str, coverage_percentage: float, lines_covered: int, total_lines: int):
    """–ó–∞–ø–∏—Å –ø–æ–∫—Ä–∏—Ç—Ç—è –∫–æ–¥—É"""
    _metrics.record_coverage(module, coverage_percentage, lines_covered, total_lines)

def record_performance(metric_name: str, value: float, unit: str = ""):
    """–ó–∞–ø–∏—Å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    _metrics.record_performance_metric(metric_name, value, unit)

def record_security_issue(issue_type: str, severity: str, description: str, location: str = ""):
    """–ó–∞–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏ –±–µ–∑–ø–µ–∫–∏"""
    _metrics.record_security_issue(issue_type, severity, description, location)

def get_metrics_report() -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –∑ –º–µ—Ç—Ä–∏–∫"""
    return _metrics.generate_report()

def save_metrics_report(filename: str = None) -> str:
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –∑ –º–µ—Ç—Ä–∏–∫"""
    return _metrics.save_report(filename)


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –º–µ—Ç—Ä–∏–∫
    metrics = TestMetrics()
    
    # –°–∏–º—É–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É —Å–µ—Å—ñ—é
    metrics.start_test_session()
    
    # –ó–∞–ø–∏—Å—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤
    metrics.record_test_result("test_auth", "passed", 0.5)
    metrics.record_test_result("test_analytics", "passed", 1.2)
    metrics.record_test_result("test_database", "failed", 0.8, "Connection timeout")
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ–∫—Ä–∏—Ç—Ç—è
    metrics.record_coverage("auth", 85.5, 171, 200)
    metrics.record_coverage("analytics", 92.3, 184, 200)
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    metrics.record_performance("response_time", 150, "ms")
    metrics.record_performance("throughput", 1000, "rps")
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –ø—Ä–æ–±–ª–µ–º–∏ –±–µ–∑–ø–µ–∫–∏
    metrics.record_security_issue("sql_injection", "high", "Potential SQL injection vulnerability", "auth/login")
    
    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å–µ—Å—ñ—é
    metrics.end_test_session()
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç
    report_file = metrics.save_report()
    
    print("üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–µ—Ç—Ä–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÑ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {report_file}") 