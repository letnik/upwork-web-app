"""
–¢–µ—Å—Ç–∏ –¥–ª—è MVP –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ - –°–∏—Å—Ç–µ–º–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å (Telegram, Push, Email)
"""

import pytest
from unittest.mock import Mock, patch
from fastapi.testclient import TestClient
import sys
import os
from datetime import datetime, timedelta

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ —Å–ø—ñ–ª—å–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..', 'app', 'backend', 'shared'))

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'utils'))
from test_helpers import create_test_user, get_test_db


class TestNotificationSystem:
    """–¢–µ—Å—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    
    def test_notification_creation(self):
        """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        # Mock –¥–∞–Ω—ñ
        user = create_test_user()
        
        # –î–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        notification_data = {
            "id": "notif_123",
            "type": "job_alert",
            "title": "–ù–æ–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞",
            "message": "–ó–Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å—ñ—é Python Developer –∑ –±—é–¥–∂–µ—Ç–æ–º $3000-$6000",
            "priority": "high",
            "channels": ["email", "telegram", "push"],
            "user_id": user["id"],
            "created_at": datetime.utcnow(),
            "read": False,
            "metadata": {
                "job_id": "upwork_job_123",
                "match_score": 85.5,
                "budget": "$3000-$6000"
            }
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö
        assert "id" in notification_data
        assert "type" in notification_data
        assert "title" in notification_data
        assert "message" in notification_data
        assert "channels" in notification_data
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö
        assert isinstance(notification_data["id"], str)
        assert isinstance(notification_data["type"], str)
        assert isinstance(notification_data["title"], str)
        assert isinstance(notification_data["channels"], list)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
        assert len(notification_data["id"]) > 0
        assert len(notification_data["title"]) <= 200
        assert len(notification_data["message"]) <= 1000
        assert notification_data["priority"] in ["low", "medium", "high", "urgent"]
        
        print("‚úÖ –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ–π—à–æ–≤")
    
    def test_notification_channels(self):
        """–¢–µ—Å—Ç –∫–∞–Ω–∞–ª—ñ–≤ —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        # –í–∞–ª—ñ–¥–Ω—ñ –∫–∞–Ω–∞–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å
        valid_channels = ["email", "telegram", "push", "slack", "sms"]
        
        for channel in valid_channels:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–∞–Ω–∞–ª –≤–∞–ª—ñ–¥–Ω–∏–π
            assert channel in valid_channels, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–∞–Ω–∞–ª —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {channel}"
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É
            notification = {
                "type": "job_alert",
                "title": f"–¢–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è - {channel}",
                "message": f"–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ {channel}",
                "channel": channel,
                "priority": "medium"
            }
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            assert "type" in notification
            assert "title" in notification
            assert "message" in notification
            assert "channel" in notification
            assert notification["channel"] == channel
        
        print("‚úÖ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª—ñ–≤ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ–π—à–æ–≤")
    
    def test_email_notification(self):
        """–¢–µ—Å—Ç email —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        # Mock –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è email
        email_config = {
            "enabled": True,
            "smtp_server": "smtp.gmail.com",
            "smtp_port": 587,
            "username": "alerts@example.com",
            "password": "your-password",
            "recipients": ["user@example.com"]
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        assert email_config["enabled"] == True
        assert len(email_config["smtp_server"]) > 0
        assert email_config["smtp_port"] > 0
        assert len(email_config["username"]) > 0
        assert len(email_config["recipients"]) > 0
        
        # –ü—Ä–∏–∫–ª–∞–¥ email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        email_notification = {
            "to": "user@example.com",
            "subject": "–ù–æ–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—è - Python Developer",
            "body": """
            –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—É –≤–∞–∫–∞–Ω—Å—ñ—é:
            
            –ü–æ–∑–∏—Ü—ñ—è: Python Developer
            –ë—é–¥–∂–µ—Ç: $3000-$6000
            –û—Ü—ñ–Ω–∫–∞ –ø—ñ–¥—Ö–æ–¥—è—â–æ—Å—Ç—ñ: 85.5%
            
            –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏: https://upwork.com/job/123
            """,
            "html_body": "<h2>–ù–æ–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—è</h2><p>Python Developer - $3000-$6000</p>"
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É email
        assert "to" in email_notification
        assert "subject" in email_notification
        assert "body" in email_notification
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å email
        assert "@" in email_notification["to"]
        assert len(email_notification["subject"]) <= 200
        assert len(email_notification["body"]) > 0
        
        print("‚úÖ –¢–µ—Å—Ç email —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ–π—à–æ–≤")
    
    def test_telegram_notification(self):
        """–¢–µ—Å—Ç Telegram —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        # Mock –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Telegram
        telegram_config = {
            "enabled": True,
            "bot_token": "1234567890:ABCdefGHIjklMNOpqrsTUVwxyz",
            "chat_id": "-1001234567890",
            "parse_mode": "HTML"
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        assert telegram_config["enabled"] == True
        assert len(telegram_config["bot_token"]) > 0
        assert len(telegram_config["chat_id"]) > 0
        
        # –ü—Ä–∏–∫–ª–∞–¥ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        telegram_notification = {
            "chat_id": "-1001234567890",
            "text": """
üîî <b>–ù–æ–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞!</b>

üíº <b>Python Developer</b>
üí∞ –ë—é–¥–∂–µ—Ç: $3000-$6000
‚≠ê –û—Ü—ñ–Ω–∫–∞: 85.5%

üîó <a href="https://upwork.com/job/123">–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏</a>
            """,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        assert "chat_id" in telegram_notification
        assert "text" in telegram_notification
        assert "parse_mode" in telegram_notification
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å
        assert len(telegram_notification["text"]) > 0
        assert telegram_notification["parse_mode"] in ["HTML", "Markdown"]
        
        print("‚úÖ –¢–µ—Å—Ç Telegram —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ–π—à–æ–≤")
    
    def test_push_notification(self):
        """–¢–µ—Å—Ç Push —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        # Mock –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Push
        push_config = {
            "enabled": True,
            "vapid_public_key": "your-vapid-public-key",
            "vapid_private_key": "your-vapid-private-key",
            "subject": "mailto:alerts@example.com"
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        assert push_config["enabled"] == True
        assert len(push_config["vapid_public_key"]) > 0
        assert len(push_config["vapid_private_key"]) > 0
        
        # –ü—Ä–∏–∫–ª–∞–¥ Push —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        push_notification = {
            "title": "–ù–æ–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—è",
            "body": "Python Developer - $3000-$6000",
            "icon": "/icon-192x192.png",
            "badge": "/badge-72x72.png",
            "data": {
                "url": "https://upwork.com/job/123",
                "job_id": "upwork_job_123",
                "match_score": 85.5
            },
            "actions": [
                {
                    "action": "view",
                    "title": "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏"
                },
                {
                    "action": "dismiss",
                    "title": "–ó–∞–∫—Ä–∏—Ç–∏"
                }
            ]
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Push —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        assert "title" in push_notification
        assert "body" in push_notification
        assert "data" in push_notification
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å
        assert len(push_notification["title"]) <= 50
        assert len(push_notification["body"]) <= 200
        assert "job_id" in push_notification["data"]
        
        print("‚úÖ –¢–µ—Å—Ç Push —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ–π—à–æ–≤")
    
    def test_notification_priority_system(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        # –ü—Ä–∏–∫–ª–∞–¥–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑ —Ä—ñ–∑–Ω–∏–º–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
        notifications_by_priority = [
            {
                "type": "job_alert",
                "title": "–í–∏—Å–æ–∫–∞ –æ—Ü—ñ–Ω–∫–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó",
                "priority": "urgent",
                "match_score": 95.0
            },
            {
                "type": "job_alert", 
                "title": "–ù–æ–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—è",
                "priority": "high",
                "match_score": 85.0
            },
            {
                "type": "system_update",
                "title": "–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏",
                "priority": "medium"
            },
            {
                "type": "weekly_report",
                "title": "–¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç",
                "priority": "low"
            }
        ]
        
        for notification in notifications_by_priority:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
            assert notification["priority"] in ["low", "medium", "high", "urgent"]
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥—ñ–∫—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤
            if "match_score" in notification:
                if notification["match_score"] >= 90:
                    assert notification["priority"] in ["high", "urgent"], "–í–∏—Å–æ–∫—ñ –æ—Ü—ñ–Ω–∫–∏ –ø–æ–≤–∏–Ω–Ω—ñ –º–∞—Ç–∏ –≤–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"
                elif notification["match_score"] >= 80:
                    assert notification["priority"] in ["medium", "high"], "–°–µ—Ä–µ–¥–Ω—ñ –æ—Ü—ñ–Ω–∫–∏ –ø–æ–≤–∏–Ω–Ω—ñ –º–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            assert notification["type"] in ["job_alert", "system_update", "weekly_report"]
        
        print("‚úÖ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ –ø—Ä–æ–π—à–æ–≤")
    
    def test_notification_delivery_tracking(self):
        """–¢–µ—Å—Ç –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        # Mock –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_tracking = [
            {
                "notification_id": "notif_1",
                "channel": "email",
                "status": "sent",
                "sent_at": datetime.utcnow(),
                "delivery_time_ms": 250
            },
            {
                "notification_id": "notif_1", 
                "channel": "telegram",
                "status": "sent",
                "sent_at": datetime.utcnow(),
                "delivery_time_ms": 180
            },
            {
                "notification_id": "notif_1",
                "channel": "push", 
                "status": "failed",
                "sent_at": datetime.utcnow(),
                "error": "Invalid subscription"
            }
        ]
        
        for tracking in delivery_tracking:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            assert "notification_id" in tracking
            assert "channel" in tracking
            assert "status" in tracking
            assert "sent_at" in tracking
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å–∏
            assert tracking["status"] in ["pending", "sent", "failed", "delivered"]
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏
            if "delivery_time_ms" in tracking:
                assert tracking["delivery_time_ms"] > 0
                assert tracking["delivery_time_ms"] < 5000, "–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –º–µ–Ω—à–µ 5 —Å–µ–∫—É–Ω–¥"
        
        print("‚úÖ –¢–µ—Å—Ç –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–π—à–æ–≤")


class TestNotificationIntegration:
    """–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    
    def test_notification_complete_workflow(self):
        """–¢–µ—Å—Ç –ø–æ–≤–Ω–æ–≥–æ workflow —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        # 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = create_test_user()
        assert user["id"] is not None
        
        # 2. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_notification_settings = {
            "email_enabled": True,
            "telegram_enabled": True,
            "push_enabled": True,
            "email": "user@example.com",
            "telegram_chat_id": "123456789",
            "notification_preferences": {
                "job_alerts": True,
                "system_updates": False,
                "weekly_reports": True
            }
        }
        
        # 3. –°–∏–º—É–ª—è—Ü—ñ—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≤–∞–∫–∞–Ω—Å—ñ—ó
        new_job = {
            "job_id": "upwork_job_123",
            "title": "Python Developer",
            "budget": "$3000-$6000",
            "match_score": 85.5
        }
        
        # 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        notification = {
            "id": "notif_123",
            "type": "job_alert",
            "title": "–ù–æ–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞",
            "message": f"–ó–Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å—ñ—é {new_job['title']} –∑ –±—é–¥–∂–µ—Ç–æ–º {new_job['budget']}",
            "priority": "high" if new_job["match_score"] >= 80 else "medium",
            "channels": ["email", "telegram", "push"],
            "user_id": user["id"],
            "metadata": {
                "job_id": new_job["job_id"],
                "match_score": new_job["match_score"]
            }
        }
        
        # 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ
        assert notification["priority"] == "high"  # 85.5 >= 80
        assert "email" in notification["channels"]
        assert "telegram" in notification["channels"]
        assert "push" in notification["channels"]
        
        # 6. –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        delivery_results = [
            {"channel": "email", "status": "sent", "delivery_time_ms": 250},
            {"channel": "telegram", "status": "sent", "delivery_time_ms": 180},
            {"channel": "push", "status": "sent", "delivery_time_ms": 120}
        ]
        
        # 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        for result in delivery_results:
            assert result["status"] == "sent"
            assert result["delivery_time_ms"] < 1000
        
        print("‚úÖ –¢–µ—Å—Ç –ø–æ–≤–Ω–æ–≥–æ workflow —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ–π—à–æ–≤")
    
    def test_notification_rate_limiting(self):
        """–¢–µ—Å—Ç –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω—å
        rate_limits = {
            "email": {"max_per_hour": 10, "max_per_day": 100},
            "telegram": {"max_per_hour": 20, "max_per_day": 200},
            "push": {"max_per_hour": 30, "max_per_day": 300}
        }
        
        # –°–∏–º—É–ª—è—Ü—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑–∞ –≥–æ–¥–∏–Ω—É
        notifications_sent = {
            "email": 8,
            "telegram": 15,
            "push": 25
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–º–µ–∂–µ–Ω—å
        for channel, sent_count in notifications_sent.items():
            limit = rate_limits[channel]["max_per_hour"]
            assert sent_count <= limit, f"–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –¥–ª—è {channel}: {sent_count} > {limit}"
        
        print("‚úÖ –¢–µ—Å—Ç –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –ø—Ä–æ–π—à–æ–≤")
    
    def test_notification_user_preferences(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        # –ü—Ä–∏–∫–ª–∞–¥–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        user_preferences = [
            {
                "user_id": "user_1",
                "email_enabled": True,
                "telegram_enabled": False,
                "push_enabled": True,
                "job_alerts": True,
                "system_updates": False,
                "weekly_reports": True
            },
            {
                "user_id": "user_2",
                "email_enabled": False,
                "telegram_enabled": True,
                "push_enabled": True,
                "job_alerts": True,
                "system_updates": True,
                "weekly_reports": False
            }
        ]
        
        for prefs in user_preferences:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            assert "user_id" in prefs
            assert "email_enabled" in prefs
            assert "telegram_enabled" in prefs
            assert "push_enabled" in prefs
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥—ñ–∫—É: —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–º
            active_channels = sum([
                prefs["email_enabled"],
                prefs["telegram_enabled"], 
                prefs["push_enabled"]
            ])
            assert active_channels > 0, "–•–æ—á–∞ –± –æ–¥–∏–Ω –∫–∞–Ω–∞–ª —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–º"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ job_alerts –∑–∞–≤–∂–¥–∏ —É–≤—ñ–º–∫–Ω–µ–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            assert prefs["job_alerts"] == True, "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤–∞–∫–∞–Ω—Å—ñ—ó –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —É–≤—ñ–º–∫–Ω–µ–Ω—ñ"
        
        print("‚úÖ –¢–µ—Å—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ–π—à–æ–≤")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
    test_notifications = TestNotificationSystem()
    test_notifications.test_notification_creation()
    test_notifications.test_notification_channels()
    test_notifications.test_email_notification()
    test_notifications.test_telegram_notification()
    test_notifications.test_push_notification()
    test_notifications.test_notification_priority_system()
    test_notifications.test_notification_delivery_tracking()
    
    test_integration = TestNotificationIntegration()
    test_integration.test_notification_complete_workflow()
    test_integration.test_notification_rate_limiting()
    test_integration.test_notification_user_preferences()
    
    print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!") 