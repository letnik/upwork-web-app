#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏ –¥–ª—è MVP-007: –°–∏—Å—Ç–µ–º–∞ —á–µ—Ä–Ω–µ—Ç–æ–∫ (100 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö)
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))
import pytest
from datetime import datetime, timedelta
from unittest.mock import Mock
from tests.utils.test_helpers import create_test_user, get_test_db

class TestProposalDrafts:
    """–¢–µ—Å—Ç–∏ –¥–ª—è —á–µ—Ä–Ω–µ—Ç–æ–∫ –≤—ñ–¥–≥—É–∫—ñ–≤"""

    def test_create_proposal_draft(self):
        """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–Ω–µ—Ç–∫–∏ –≤—ñ–¥–≥—É–∫—É"""
        user = create_test_user()
        db = get_test_db()
        draft = Mock()
        draft.id = 1
        draft.user_id = user["id"]
        draft.content = "Test draft content"
        draft.status = "draft"
        draft.created_at = datetime.now()
        assert draft.id == 1
        assert draft.user_id == user["id"]
        assert draft.content == "Test draft content"
        assert draft.status == "draft"
        print("‚úÖ –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–Ω–µ—Ç–∫–∏ –≤—ñ–¥–≥—É–∫—É –ø—Ä–æ–π—à–æ–≤")

    def test_draft_limit_100(self):
        """–¢–µ—Å—Ç –ª—ñ–º—ñ—Ç—É 100 —á–µ—Ä–Ω–µ—Ç–æ–∫ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å—Ç–∞—Ä—ñ –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è)"""
        user = create_test_user()
        drafts = []
        # –°—Ç–≤–æ—Ä—é—î–º–æ 100 —á–µ—Ä–Ω–µ—Ç–æ–∫
        for i in range(100):
            draft = Mock()
            draft.id = i + 1
            draft.user_id = user["id"]
            draft.content = f"Draft {i+1}"
            draft.created_at = datetime.now() - timedelta(minutes=100-i)
            drafts.append(draft)
        assert len(drafts) == 100
        # –î–æ–¥–∞—î–º–æ 101-—à—É ‚Äî –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∞ –º–∞—î –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–∞
        oldest = min(drafts, key=lambda d: d.created_at)
        new_draft = Mock()
        new_draft.id = 101
        new_draft.user_id = user["id"]
        new_draft.content = "Draft 101"
        new_draft.created_at = datetime.now()
        drafts.append(new_draft)
        # –°–∏–º—É–ª—é—î–º–æ –∞–≤—Ç–æ-–≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–æ—ó
        drafts = sorted(drafts, key=lambda d: d.created_at)[1:]
        assert len(drafts) == 100
        assert oldest not in drafts
        print("‚úÖ –¢–µ—Å—Ç –ª—ñ–º—ñ—Ç—É 100 —á–µ—Ä–Ω–µ—Ç–æ–∫ (—Å—Ç–∞—Ä—ñ –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è) –ø—Ä–æ–π—à–æ–≤")

    def test_get_proposal_drafts(self):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —á–µ—Ä–Ω–µ—Ç–æ–∫"""
        user = create_test_user()
        drafts = [Mock(id=i+1, user_id=user["id"], content=f"Draft {i+1}", status="draft", created_at=datetime.now()) for i in range(10)]
        # –°–∏–º—É–ª—é—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É
        result = [{"id": d.id, "content": d.content, "status": d.status} for d in drafts]
        assert len(result) == 10
        assert result[0]["id"] == 1
        assert result[-1]["id"] == 10
        print("‚úÖ –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —á–µ—Ä–Ω–µ—Ç–æ–∫ –ø—Ä–æ–π—à–æ–≤")

    def test_delete_proposal_draft(self):
        """–¢–µ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–Ω–µ—Ç–∫–∏"""
        user = create_test_user()
        drafts = [Mock(id=i+1, user_id=user["id"], content=f"Draft {i+1}", status="draft", created_at=datetime.now()) for i in range(5)]
        to_delete = drafts[2]
        drafts = [d for d in drafts if d.id != to_delete.id]
        assert len(drafts) == 4
        assert to_delete not in drafts
        print("‚úÖ –¢–µ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–Ω–µ—Ç–∫–∏ –ø—Ä–æ–π—à–æ–≤")

    def test_draft_edge_cases(self):
        """–¢–µ—Å—Ç edge cases: –Ω–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ 101-—à—É —á–µ—Ä–Ω–µ—Ç–∫—É –±–µ–∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ—ó"""
        user = create_test_user()
        drafts = [Mock(id=i+1, user_id=user["id"], content=f"Draft {i+1}", created_at=datetime.now() - timedelta(minutes=100-i)) for i in range(100)]
        # –î–æ–¥–∞—î–º–æ —â–µ –æ–¥–Ω—É ‚Äî –º–∞—î –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–∞ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∞
        oldest = min(drafts, key=lambda d: d.created_at)
        new_draft = Mock(id=101, user_id=user["id"], content="Draft 101", created_at=datetime.now())
        drafts.append(new_draft)
        drafts = sorted(drafts, key=lambda d: d.created_at)[1:]
        ids = [d.id for d in drafts]
        assert len(drafts) == 100
        assert oldest.id not in ids
        assert 101 in ids
        print("‚úÖ –¢–µ—Å—Ç edge cases –¥–ª—è —á–µ—Ä–Ω–µ—Ç–æ–∫ –ø—Ä–æ–π—à–æ–≤")

if __name__ == "__main__":
    test_instance = TestProposalDrafts()
    test_instance.test_create_proposal_draft()
    test_instance.test_draft_limit_100()
    test_instance.test_get_proposal_drafts()
    test_instance.test_delete_proposal_draft()
    test_instance.test_draft_edge_cases()
    print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ —á–µ—Ä–Ω–µ—Ç–æ–∫ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")