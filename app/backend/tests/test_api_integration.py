#!/usr/bin/env python3
"""
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç Upwork Web App API
"""

import sys
import os
import asyncio
import json
import time
from datetime import datetime

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.services.upwork_service import UpworkService
from src.auth.models import User
from src.database.connection import db_manager


def test_environment_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    
    print("üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    required_vars = [
        'UPWORK_CLIENT_ID',
        'UPWORK_CLIENT_SECRET',
        'UPWORK_REDIRECT_URI',
        'ENCRYPTION_KEY',
        'DATABASE_URL',
        'SECRET_KEY'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if not missing_vars:
        print("‚úÖ –í—Å—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")
        print("üìã –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:")
        print(f"   UPWORK_CLIENT_ID: {os.getenv('UPWORK_CLIENT_ID', '')[:8]}...")
        print(f"   UPWORK_REDIRECT_URI: {os.getenv('UPWORK_REDIRECT_URI')}")
        print(f"   DATABASE_URL: {os.getenv('DATABASE_URL', '')[:20]}...")
        return True
    else:
        print("‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:")
        for var in missing_vars:
            print(f"   - {var}")
        print("üìù –ù–∞–ª–∞—à—Ç—É–π—Ç–µ .env —Ñ–∞–π–ª –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –∑–º—ñ–Ω–Ω–∏–º–∏")
        return False


def test_service_creation():
    """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Upwork —Å–µ—Ä–≤—ñ—Å—É"""
    
    print("\nüöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Upwork —Å–µ—Ä–≤—ñ—Å—É...")
    
    try:
        service = UpworkService()
        print("‚úÖ Upwork —Å–µ—Ä–≤—ñ—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return service
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É: {e}")
        return None


async def test_api_search(service):
    """–¢–µ—Å—Ç –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ API"""
    
    if not service:
        print("‚ö†Ô∏è –°–µ—Ä–≤—ñ—Å –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç –ø–æ—à—É–∫—É")
        return
    
    print("\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ API...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    if not os.getenv('UPWORK_CLIENT_ID'):
        print("‚ö†Ô∏è API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–∫–æ–≤—ñ –¥–∞–Ω—ñ")
        return
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        test_user = User(
            id=1,
            email="test@example.com",
            upwork_access_token="test_token",
            upwork_user_id="test_user_id"
        )
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫
        test_query = "python developer"
        print(f"üîç –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫: '{test_query}'")
        
        jobs = await service.get_user_jobs(test_user, query=test_query)
        
        if jobs:
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(jobs)} –≤–∞–∫–∞–Ω—Å—ñ–π")
            for i, job in enumerate(jobs[:3]):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
                print(f"   {i+1}. {job.get('title', 'N/A')}")
                print(f"      –ë—é–¥–∂–µ—Ç: ${job.get('budget_min', '?')}-${job.get('budget_max', '?')}")
                print(f"      –ö—Ä–∞—ó–Ω–∞: {job.get('client_country', 'N/A')}")
        else:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å—ñ–π –∞–±–æ –ø–æ–º–∏–ª–∫–∞ API")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}")


def test_database_integration():
    """–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
    
    print("\nüíæ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –ë–î...")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ—Å—ñ—é –ë–î
        db_session = db_manager.SessionLocal()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        from sqlalchemy import text
        result = db_session.execute(text("SELECT 1"))
        print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —É—Å–ø—ñ—à–Ω–µ")
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–æ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        mock_jobs = [
            {
                "id": "~test123456789",
                "title": "Test Python Developer",
                "snippet": "Test job for API integration",
                "budget": 1000.0,
                "skills": ["Python", "Testing"],
                "category2": "Web Development",
                "client": {
                    "location": {"country": "Test Country"},
                    "feedback": 4.5,
                    "reviews_count": 10
                },
                "date_created": "2024-12-19T10:00:00+0000",
                "type": "fixed"
            }
        ]
        
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –Ω–æ–≤—É –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö –≥–æ—Ç–æ–≤–∞")
        
        db_session.close()
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –ë–î: {e}")


async def test_full_workflow():
    """–¢–µ—Å—Ç –ø–æ–≤–Ω–æ–≥–æ workflow"""
    
    print("\nüîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ workflow...")
    
    if not os.getenv('UPWORK_CLIENT_ID'):
        print("‚ö†Ô∏è API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç workflow")
        return
    
    try:
        service = UpworkService()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        test_user = User(
            id=1,
            email="test@example.com",
            upwork_access_token="test_token",
            upwork_user_id="test_user_id"
        )
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø–æ–≤–Ω–∏–π workflow
        print("üìã –¢–µ—Å—Ç—É—î–º–æ workflow:")
        print("   1. –ü–æ—à—É–∫ –≤–∞–∫–∞–Ω—Å—ñ–π")
        print("   2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É")
        print("   3. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–≥—É–∫—É")
        
        # –¢—É—Ç –±—É–¥–µ –ø–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        print("‚úÖ Workflow —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ workflow: {e}")


def create_sample_env():
    """–°—Ç–≤–æ—Ä—é—î –∑—Ä–∞–∑–æ–∫ .env —Ñ–∞–π–ª—É"""
    
    print("\nüìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑—Ä–∞–∑–∫–∞ .env —Ñ–∞–π–ª—É...")
    
    env_template = """# Upwork API
UPWORK_CLIENT_ID=your_client_id_here
UPWORK_CLIENT_SECRET=your_client_secret_here
UPWORK_CALLBACK_URL=http://localhost:8000/auth/upwork/callback

# –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
ENCRYPTION_KEY=your_encryption_key_base64_here

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
DATABASE_URL=postgresql://user:password@localhost/upwork_web_app

# JWT
SECRET_KEY=your_jwt_secret_key_here

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
DEBUG=True
LOG_LEVEL=INFO
"""
    
    with open('.env.sample', 'w') as f:
        f.write(env_template)
    
    print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ .env.sample —Ñ–∞–π–ª")
    print("üìù –°–∫–æ–ø—ñ—é–π—Ç–µ .env.sample –≤ .env —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    
    print("üß™ –Ü–ù–¢–ï–ì–†–ê–¶–Ü–ô–ù–ò–ô –¢–ï–°–¢ UPWORK WEB APP")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    env_ok = test_environment_configuration()
    
    # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É
    service = test_service_creation()
    
    # –¢–µ—Å—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    test_database_integration()
    
    # –¢–µ—Å—Ç API –ø–æ—à—É–∫—É (async)
    if service and env_ok:
        asyncio.run(test_api_search(service))
        asyncio.run(test_full_workflow())
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑—Ä–∞–∑–∫–∞ .env
    if not env_ok:
        create_sample_env()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    print("üìã –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏—â–µ")


if __name__ == "__main__":
    main() 