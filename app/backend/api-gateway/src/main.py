"""
API Gateway - –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤ –º—ñ–∂ –º—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å–∞–º–∏
"""

from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import httpx
import sys
import os
from datetime import datetime

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ —Å–ø—ñ–ª—å–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'shared'))

from shared.config.settings import settings
from shared.config.logging import setup_logging, get_logger

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
setup_logging(service_name="api-gateway")
logger = get_logger("api-gateway")

# –°—Ç–≤–æ—Ä—é—î–º–æ FastAPI –¥–æ–¥–∞—Ç–æ–∫
app = FastAPI(
    title="API Gateway",
    description="API Gateway –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤ –º—ñ–∂ –º—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å–∞–º–∏",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# HTTP –∫–ª—ñ—î–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –º—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å—ñ–≤
http_client = httpx.AsyncClient(timeout=30.0)


@app.on_event("startup")
async def startup_event():
    """–ü–æ–¥—ñ—è –∑–∞–ø—É—Å–∫—É API Gateway"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ API Gateway...")


@app.on_event("shutdown")
async def shutdown_event():
    """–ü–æ–¥—ñ—è –∑—É–ø–∏–Ω–∫–∏ API Gateway"""
    await http_client.aclose()
    logger.info("üõë API Gateway –∑—É–ø–∏–Ω–µ–Ω–æ")


@app.get("/")
async def root():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ API Gateway"""
    return {
        "service": "API Gateway",
        "version": "1.0.0",
        "status": "running",
        "timestamp": datetime.utcnow().isoformat(),
        "services": {
            "auth": settings.AUTH_SERVICE_URL,
            "upwork": settings.UPWORK_SERVICE_URL,
            "ai": settings.AI_SERVICE_URL,
            "analytics": settings.ANALYTICS_SERVICE_URL,
            "notification": settings.NOTIFICATION_SERVICE_URL
        }
    }


@app.get("/health")
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API Gateway"""
    return {
        "status": "healthy",
        "service": "api-gateway",
        "timestamp": datetime.utcnow().isoformat()
    }


# ===== AUTH SERVICE ROUTES =====

@app.api_route("/auth/{path:path}", methods=["GET", "POST", "PUT", "DELETE"])
async def auth_service_route(request: Request, path: str):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Auth Service"""
    try:
        # –§–æ—Ä–º—É—î–º–æ URL –¥–ª—è Auth Service
        url = f"{settings.AUTH_SERVICE_URL}/auth/{path}"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É
        body = await request.body()
        
        # –§–æ—Ä–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = dict(request.headers)
        headers.pop("host", None)  # –í–∏–¥–∞–ª—è—î–º–æ host –∑–∞–≥–æ–ª–æ–≤–æ–∫
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ Auth Service
        response = await http_client.request(
            method=request.method,
            url=url,
            headers=headers,
            content=body,
            params=request.query_params
        )
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        return JSONResponse(
            content=response.json(),
            status_code=response.status_code,
            headers=dict(response.headers)
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó –¥–æ Auth Service: {e}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ Auth Service")


# ===== UPWORK SERVICE ROUTES =====

@app.api_route("/upwork/{path:path}", methods=["GET", "POST", "PUT", "DELETE"])
async def upwork_service_route(request: Request, path: str):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Upwork Service"""
    try:
        # –§–æ—Ä–º—É—î–º–æ URL –¥–ª—è Upwork Service
        url = f"{settings.UPWORK_SERVICE_URL}/upwork/{path}"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É
        body = await request.body()
        
        # –§–æ—Ä–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = dict(request.headers)
        headers.pop("host", None)
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ Upwork Service
        response = await http_client.request(
            method=request.method,
            url=url,
            headers=headers,
            content=body,
            params=request.query_params
        )
        
        return JSONResponse(
            content=response.json(),
            status_code=response.status_code,
            headers=dict(response.headers)
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó –¥–æ Upwork Service: {e}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ Upwork Service")


# ===== AI SERVICE ROUTES =====

@app.api_route("/ai/{path:path}", methods=["GET", "POST", "PUT", "DELETE"])
async def ai_service_route(request: Request, path: str):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ AI Service"""
    try:
        # –§–æ—Ä–º—É—î–º–æ URL –¥–ª—è AI Service
        url = f"{settings.AI_SERVICE_URL}/ai/{path}"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É
        body = await request.body()
        
        # –§–æ—Ä–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = dict(request.headers)
        headers.pop("host", None)
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ AI Service
        response = await http_client.request(
            method=request.method,
            url=url,
            headers=headers,
            content=body,
            params=request.query_params
        )
        
        return JSONResponse(
            content=response.json(),
            status_code=response.status_code,
            headers=dict(response.headers)
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó –¥–æ AI Service: {e}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ AI Service")


# ===== ANALYTICS SERVICE ROUTES =====

@app.api_route("/analytics/{path:path}", methods=["GET", "POST", "PUT", "DELETE"])
async def analytics_service_route(request: Request, path: str):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Analytics Service"""
    try:
        # –§–æ—Ä–º—É—î–º–æ URL –¥–ª—è Analytics Service
        url = f"{settings.ANALYTICS_SERVICE_URL}/analytics/{path}"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É
        body = await request.body()
        
        # –§–æ—Ä–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = dict(request.headers)
        headers.pop("host", None)
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ Analytics Service
        response = await http_client.request(
            method=request.method,
            url=url,
            headers=headers,
            content=body,
            params=request.query_params
        )
        
        return JSONResponse(
            content=response.json(),
            status_code=response.status_code,
            headers=dict(response.headers)
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó –¥–æ Analytics Service: {e}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ Analytics Service")


# ===== NOTIFICATION SERVICE ROUTES =====

@app.api_route("/notifications/{path:path}", methods=["GET", "POST", "PUT", "DELETE"])
async def notification_service_route(request: Request, path: str):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Notification Service"""
    try:
        # –§–æ—Ä–º—É—î–º–æ URL –¥–ª—è Notification Service
        url = f"{settings.NOTIFICATION_SERVICE_URL}/notifications/{path}"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É
        body = await request.body()
        
        # –§–æ—Ä–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = dict(request.headers)
        headers.pop("host", None)
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ Notification Service
        response = await http_client.request(
            method=request.method,
            url=url,
            headers=headers,
            content=body,
            params=request.query_params
        )
        
        return JSONResponse(
            content=response.json(),
            status_code=response.status_code,
            headers=dict(response.headers)
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó –¥–æ Notification Service: {e}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ Notification Service")


# ===== LEGACY ROUTES (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ) =====

@app.api_route("/jobs/{path:path}", methods=["GET", "POST", "PUT", "DELETE"])
async def jobs_legacy_route(request: Request, path: str):
    """Legacy –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å—ñ–π (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ Upwork Service)"""
    try:
        url = f"{settings.UPWORK_SERVICE_URL}/upwork/jobs/{path}"
        body = await request.body()
        headers = dict(request.headers)
        headers.pop("host", None)
        
        response = await http_client.request(
            method=request.method,
            url=url,
            headers=headers,
            content=body,
            params=request.query_params
        )
        
        return JSONResponse(
            content=response.json(),
            status_code=response.status_code,
            headers=dict(response.headers)
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ legacy –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó jobs: {e}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ Upwork Service")


@app.api_route("/applications/{path:path}", methods=["GET", "POST", "PUT", "DELETE"])
async def applications_legacy_route(request: Request, path: str):
    """Legacy –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –∑–∞—è–≤–æ–∫ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ Upwork Service)"""
    try:
        url = f"{settings.UPWORK_SERVICE_URL}/upwork/applications/{path}"
        body = await request.body()
        headers = dict(request.headers)
        headers.pop("host", None)
        
        response = await http_client.request(
            method=request.method,
            url=url,
            headers=headers,
            content=body,
            params=request.query_params
        )
        
        return JSONResponse(
            content=response.json(),
            status_code=response.status_code,
            headers=dict(response.headers)
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ legacy –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó applications: {e}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ Upwork Service")


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower()
    ) 