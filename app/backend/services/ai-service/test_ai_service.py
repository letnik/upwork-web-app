"""
–¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ AI Service
"""

import asyncio
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ src
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.ai_service import AIService


async def test_ai_service():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è AI Service"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è AI Service...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ AI Service
    ai_service = AIService()
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    test_job = {
        "title": "Python Developer –¥–ª—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É",
        "description": "–ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π Python —Ä–æ–∑—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Django —Ç–∞ React. –ü—Ä–æ–µ–∫—Ç –≤–∫–ª—é—á–∞—î —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó, –±–∞–∑—É –¥–∞–Ω–∏—Ö PostgreSQL, —Ç–∞ REST API.",
        "budget": "$2000-5000",
        "skills": ["Python", "Django", "React", "PostgreSQL", "REST API"],
        "experience_level": "intermediate",
        "job_type": "fixed"
    }
    
    test_profile = {
        "skills": ["Python", "Django", "Flask", "JavaScript", "React", "PostgreSQL"],
        "experience": "3 —Ä–æ–∫–∏ —Ä–æ–∑—Ä–æ–±–∫–∏ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—ñ–≤",
        "hourly_rate": "$35",
        "portfolio": "https://github.com/developer",
        "languages": ["–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞"]
    }
    
    test_jobs = [
        {
            "id": "1",
            "title": "Python Developer",
            "description": "–†–æ–∑—Ä–æ–±–∫–∞ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É",
            "budget": "$2000-5000",
            "skills": ["Python", "Django"]
        },
        {
            "id": "2", 
            "title": "React Developer",
            "description": "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤",
            "budget": "$1500-3000",
            "skills": ["React", "JavaScript"]
        },
        {
            "id": "3",
            "title": "Full Stack Developer",
            "description": "–ü–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∞ —Ä–æ–∑—Ä–æ–±–∫–∞ –¥–æ–¥–∞—Ç–∫—É",
            "budget": "$5000-10000",
            "skills": ["Python", "React", "PostgreSQL"]
        }
    ]
    
    print("\n1. üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤—ñ—Å—ñ–≤...")
    status = ai_service.get_service_status()
    print(f"   OpenAI –¥–æ—Å—Ç—É–ø–Ω–∏–π: {status['openai_available']}")
    print(f"   Claude –¥–æ—Å—Ç—É–ø–Ω–∏–π: {status['claude_available']}")
    print(f"   –ë—É–¥—å-—è–∫–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π: {status['any_available']}")
    
    if not status['any_available']:
        print("‚ùå –ñ–æ–¥–µ–Ω AI —Å–µ—Ä–≤—ñ—Å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ API –∫–ª—é—á—ñ.")
        return
    
    print("\n2. üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É –≤–∞–∫–∞–Ω—Å—ñ—ó...")
    try:
        analysis_result = await ai_service.analyze_job(test_job)
        if analysis_result["success"]:
            print("‚úÖ –ê–Ω–∞–ª—ñ–∑ –≤–∞–∫–∞–Ω—Å—ñ—ó —É—Å–ø—ñ—à–Ω–∏–π")
            analysis = analysis_result["analysis"]
            print(f"   –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: {analysis.get('complexity_score', 'N/A')}/10")
            print(f"   –ë—é–¥–∂–µ—Ç: {analysis.get('budget_adequacy', 'N/A')}")
            print(f"   –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —É—Å–ø—ñ—Ö—É: {analysis.get('success_probability', 'N/A')}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {analysis_result.get('error', 'Unknown error')}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
    
    print("\n3. ‚úçÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó...")
    try:
        proposal_result = await ai_service.generate_proposal(test_job, test_profile)
        if proposal_result["success"]:
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–∞")
            proposal = proposal_result["proposal"]
            print(f"   –ú–æ–¥–µ–ª—å: {proposal_result['model']}")
            print(f"   –¢–µ–∫—Å—Ç –¥–æ–≤–∂–∏–Ω–æ—é: {len(proposal.get('proposal_text', ''))} —Å–∏–º–≤–æ–ª—ñ–≤")
            print(f"   –û—Ü—ñ–Ω–∫–∞ –≥–æ–¥–∏–Ω: {proposal.get('estimated_hours', 'N/A')}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {proposal_result.get('error', 'Unknown error')}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")
    
    print("\n4. üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –≤–∞–∫–∞–Ω—Å—ñ–π...")
    try:
        filter_result = await ai_service.filter_jobs(test_jobs, test_profile)
        if filter_result["success"]:
            print("‚úÖ –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –≤–∞–∫–∞–Ω—Å—ñ–π —É—Å–ø—ñ—à–Ω–∞")
            filtered_jobs = filter_result["filtered_jobs"]
            print(f"   –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {len(filtered_jobs)} –∑ {len(test_jobs)}")
            for job in filtered_jobs:
                print(f"   - {job.get('title', 'Unknown')} (AI score: {job.get('ai_score', 'N/A')})")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: {filter_result.get('error', 'Unknown error')}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: {e}")
    
    print("\n5. üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è...")
    try:
        connection_result = await ai_service.test_connection()
        print("‚úÖ –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print(f"   OpenAI —Ç–µ—Å—Ç: {connection_result.get('openai_test', {}).get('success', False)}")
        print(f"   Claude —Ç–µ—Å—Ç: {connection_result.get('claude_test', {}).get('success', False)}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(test_ai_service()) 