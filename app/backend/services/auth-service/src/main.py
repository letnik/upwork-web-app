"""
Auth Service - –ú—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
"""

from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
from pydantic import BaseModel
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ —Å–ø—ñ–ª—å–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..', 'shared'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

from shared.config.settings import settings
from shared.config.logging import setup_logging, get_logger
from shared.database.connection import get_db, db_manager
from shared.utils.oauth_manager import oauth_manager
from .models import User, UserSecurity, Role
from .oauth import router as oauth_router

from .mfa import router as mfa_router
from .jwt_manager import router as jwt_router
from .password_reset import router as password_reset_router
from .session_manager import router as session_manager_router

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
setup_logging(service_name="auth-service")
logger = get_logger("auth-service")

# –°—Ç–≤–æ—Ä—é—î–º–æ FastAPI –¥–æ–¥–∞—Ç–æ–∫
app = FastAPI(
    title="Auth Service",
    description="–ú—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó",
    version="1.0.0",
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Pydantic –º–æ–¥–µ–ª—ñ
class LoginRequest(BaseModel):
    email: str
    password: str

class RegisterRequest(BaseModel):
    email: str
    password: str
    first_name: str = None
    last_name: str = None

# Security
security = HTTPBearer()

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏
app.include_router(oauth_router, prefix="/auth/oauth", tags=["OAuth"])

app.include_router(mfa_router, prefix="/auth/mfa", tags=["MFA"])
app.include_router(jwt_router, prefix="/auth/jwt", tags=["JWT"])
app.include_router(password_reset_router, prefix="/auth/password", tags=["Password Reset"])
app.include_router(session_manager_router, prefix="/auth/sessions", tags=["Session Management"])


@app.on_event("startup")
async def startup_event():
    """–ü–æ–¥—ñ—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—É"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Auth Service...")
    
    # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    if not db_manager.test_connection():
        logger.warning("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ü—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ –ë–î")
    else:
        logger.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —É—Å–ø—ñ—à–Ω–µ")
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        try:
            db_manager.create_tables()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ñ –ë–î —Å—Ç–≤–æ—Ä–µ–Ω—ñ/–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")


@app.get("/")
async def root():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—É"""
    return {
        "service": "Auth Service",
        "version": "1.0.0",
        "status": "running",
        "timestamp": datetime.utcnow().isoformat()
    }


@app.get("/health")
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É"""
    db_status = "healthy" if db_manager.test_connection() else "unhealthy"
    redis_status = "healthy" if db_manager.test_redis_connection() else "unhealthy"
    
    return {
        "status": "healthy",
        "service": "auth-service",
        "database": db_status,
        "redis": redis_status,
        "timestamp": datetime.utcnow().isoformat()
    }


@app.get("/test")
async def test_endpoint():
    """–¢–µ—Å—Ç–æ–≤–∏–π endpoint –±–µ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    return {
        "message": "Auth service is working!",
        "status": "ok",
        "timestamp": datetime.utcnow().isoformat()
    }


@app.post("/auth/login-test", tags=["Authentication"])
async def login_user_test(credentials: LoginRequest):
    """–¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è –≤—Ö–æ–¥—É –±–µ–∑ –ë–î"""
    return {
        "access_token": "test_token_123",
        "refresh_token": "test_refresh_123",
        "token_type": "bearer",
        "user": {
            "id": 1,
            "email": credentials.email,
            "first_name": "Test",
            "last_name": "User",
            "mfa_enabled": False
        }
    }


@app.post("/auth/register", tags=["Authentication"])
async def register_user(
    user_data: RegisterRequest,
    db: Session = Depends(get_db)
):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
        existing_user = db.query(User).filter(User.email == user_data.email).first()
        if existing_user:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–æ—é email –∞–¥—Ä–µ—Å–æ—é –≤–∂–µ —ñ—Å–Ω—É—î"
            )
        
        # –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
        from shared.utils.encryption import hash_password
        hashed_password = hash_password(user_data.password)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        new_user = User(
            email=user_data.email,
            password_hash=hashed_password,
            first_name=user_data.first_name,
            last_name=user_data.last_name,
            is_active=True,
            is_verified=False,
            role_id=1  # Default role
        )
        
        db.add(new_user)
        db.commit()
        db.refresh(new_user)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –±–µ–∑–ø–µ–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        from .models import UserSecurity
        user_security = UserSecurity(
            user_id=new_user.id,
            mfa_enabled=False,
            failed_login_attempts=0
        )
        db.add(user_security)
        db.commit()
        
        logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: {user_data.email}")
        
        return {
            "message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π",
            "user_id": new_user.id,
            "email": new_user.email,
            "status": "pending_verification"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Å–µ—Å—ñ—ó –ë–î
        try:
            db.rollback()
        except:
            pass
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
        )


@app.post("/auth/login", tags=["Authentication"])
async def login_user(
    credentials: LoginRequest,
    db: Session = Depends(get_db)
):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = db.query(User).filter(User.email == credentials.email).first()
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å"
            )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤–Ω–∏–π
        if not user.is_active:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ"
            )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–æ–ª—å
        from shared.utils.encryption import verify_password
        if not verify_password(credentials.password, user.password_hash):
            # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–±
            user_security = db.query(UserSecurity).filter(UserSecurity.user_id == user.id).first()
            if user_security:
                user_security.failed_login_attempts += 1
                db.commit()
            
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å"
            )
        
        # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–±
        user_security = db.query(UserSecurity).filter(UserSecurity.user_id == user.id).first()
        if user_security:
            user_security.failed_login_attempts = 0
            user_security.last_login = datetime.utcnow()
            db.commit()
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ JWT —Ç–æ–∫–µ–Ω–∏
        from .jwt_manager import create_access_token, create_refresh_token
        
        access_token = create_access_token(data={"sub": user.email, "user_id": user.id})
        refresh_token = create_refresh_token(data={"sub": user.email, "user_id": user.id})
        
        logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π: {user.email}")
        
        return {
            "access_token": access_token,
            "refresh_token": refresh_token,
            "token_type": "bearer",
            "user": {
                "id": user.id,
                "email": user.email,
                "first_name": user.first_name,
                "last_name": user.last_name,
                "is_verified": user.is_verified,
                "mfa_enabled": user_security.mfa_enabled if user_security else False
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"
        )


@app.get("/auth/profile", tags=["Authentication"])
async def get_user_profile(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Session = Depends(get_db)
):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    Args:
        credentials: JWT —Ç–æ–∫–µ–Ω
        db: –°–µ—Å—ñ—è –ë–î
    """
    try:
        from .jwt_manager import verify_token
        
        # –í–µ—Ä–∏—Ñ—ñ–∫—É—î–º–æ —Ç–æ–∫–µ–Ω
        payload = verify_token(credentials.credentials)
        user_id = payload.get("sub")
        
        if not user_id:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω"
            )
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"
            )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–µ–∑–ø–µ–∫—É
        user_security = db.query(UserSecurity).filter(
            UserSecurity.user_id == user.id
        ).first()
        
        return {
            "id": user.id,
            "email": user.email,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "is_active": user.is_active,
            "created_at": user.created_at.isoformat(),
            "mfa_enabled": user_security.mfa_enabled if user_security else False,
            "last_login": user_security.last_login.isoformat() if user_security and user_security.last_login else None
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"
        )


# ============================================================================
# OAuth 2.0 Endpoints –¥–ª—è Upwork (–≤–∏–¥–∞–ª–µ–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Ä–æ—É—Ç–µ—Ä)
# ============================================================================


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8001,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower()
    ) 