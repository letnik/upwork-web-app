"""
Upwork Service - –ú—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Upwork API
"""

from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from datetime import datetime
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ —Å–ø—ñ–ª—å–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
shared_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'shared'))
sys.path.insert(0, shared_path)

from shared.config.settings import settings
from shared.config.logging import setup_logging, get_logger
from shared.database.connection import get_db, db_manager

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
setup_logging(service_name="upwork-service")
logger = get_logger("upwork-service")

# –°—Ç–≤–æ—Ä—é—î–º–æ FastAPI –¥–æ–¥–∞—Ç–æ–∫
app = FastAPI(
    title="Upwork Service",
    description="–ú—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Upwork API",
    version="1.0.0",
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.on_event("startup")
async def startup_event():
    """–ü–æ–¥—ñ—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—É"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Upwork Service...")
    
    # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    if not db_manager.test_connection():
        logger.warning("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ü—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ –ë–î")
    else:
        logger.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —É—Å–ø—ñ—à–Ω–µ")


@app.get("/")
async def root():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—É"""
    return {
        "service": "Upwork Service",
        "version": "1.0.0",
        "status": "running",
        "timestamp": datetime.utcnow().isoformat()
    }


@app.get("/health")
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É"""
    db_status = "healthy" if db_manager.test_connection() else "unhealthy"
    redis_status = "healthy" if db_manager.test_redis_connection() else "unhealthy"
    
    return {
        "status": "healthy",
        "service": "upwork-service",
        "database": db_status,
        "redis": redis_status,
        "timestamp": datetime.utcnow().isoformat()
    }


@app.get("/upwork/jobs")
async def get_jobs(
    skip: int = 0,
    limit: int = 100,
    skills: str = None,
    budget_min: float = None,
    budget_max: float = None,
    location: str = None,
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å—ñ–π"""
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ UpworkAPIClient
        from src.upwork_client import MockUpworkAPIClient
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ mock –∫–ª—ñ—î–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        client = MockUpworkAPIClient()
        
        # –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
        filters = {}
        if skills:
            filters["skills"] = skills
        if budget_min:
            filters["budget_min"] = budget_min
        if budget_max:
            filters["budget_max"] = budget_max
        if location:
            filters["location"] = location
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∞–∫–∞–Ω—Å—ñ—ó
        result = client.search_jobs("", filters)
        jobs = result.get("jobs", [])
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
        jobs = jobs[skip:skip + limit]
        
        logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(jobs)} –≤–∞–∫–∞–Ω—Å—ñ–π")
        
        return {
            "jobs": jobs,
            "total": len(jobs),
            "skip": skip,
            "limit": limit,
            "filters_applied": filters
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ–π: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ–π: {str(e)}"
        )


@app.get("/upwork/jobs/search")
async def search_jobs(
    query: str,
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db)
):
    """–ü–æ—à—É–∫ –≤–∞–∫–∞–Ω—Å—ñ–π"""
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ UpworkAPIClient
        from src.upwork_client import MockUpworkAPIClient
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ mock –∫–ª—ñ—î–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        client = MockUpworkAPIClient()
        
        # –®—É–∫–∞—î–º–æ –≤–∞–∫–∞–Ω—Å—ñ—ó
        result = client.search_jobs(query)
        jobs = result.get("jobs", [])
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
        jobs = jobs[skip:skip + limit]
        
        logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(jobs)} –≤–∞–∫–∞–Ω—Å—ñ–π –¥–ª—è –∑–∞–ø–∏—Ç—É: {query}")
        
        return {
            "jobs": jobs,
            "total": len(jobs),
            "query": query,
            "skip": skip,
            "limit": limit
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –≤–∞–∫–∞–Ω—Å—ñ–π: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –≤–∞–∫–∞–Ω—Å—ñ–π"
        )


@app.get("/upwork/jobs/{job_id}")
async def get_job(
    job_id: str,
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å—ñ—ó"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ mock –∫–ª—ñ—î–Ω—Ç
        client = MockUpworkAPIClient()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó
        job = client.get_job_details(job_id)
        
        logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–µ—Ç–∞–ª—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó: {job_id}")
        
        return {
            "job": job
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ—ó: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ—ó"
        )


@app.get("/upwork/applications")
async def get_applications(
    skip: int = 0,
    limit: int = 50,
    job_id: str = None,
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ mock –∫–ª—ñ—î–Ω—Ç
        client = MockUpworkAPIClient()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ mock –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
        mock_proposals = [
            {
                "id": "proposal_1",
                "job_id": "~0123456789012345",
                "proposal_text": "I am interested in this project and have relevant experience...",
                "bid_amount": 2500,
                "delivery_time": "2-3 weeks",
                "status": "pending",
                "submitted_at": "2024-01-15T10:00:00Z"
            },
            {
                "id": "proposal_2", 
                "job_id": "~0123456789012347",
                "proposal_text": "I have extensive experience with React Native...",
                "bid_amount": 4000,
                "delivery_time": "1-2 months",
                "status": "accepted",
                "submitted_at": "2024-01-14T15:30:00Z"
            }
        ]
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ job_id —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
        if job_id:
            mock_proposals = [p for p in mock_proposals if p["job_id"] == job_id]
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
        proposals = mock_proposals[skip:skip + limit]
        
        logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(proposals)} –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π")
        
        return {
            "applications": proposals,
            "total": len(mock_proposals),
            "skip": skip,
            "limit": limit
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π"
        )


@app.post("/upwork/applications")
async def create_application(
    job_id: str,
    proposal_text: str,
    bid_amount: float,
    delivery_time: str,
    db: Session = Depends(get_db)
):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ mock –∫–ª—ñ—î–Ω—Ç
        client = MockUpworkAPIClient()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –≤–∞–∫–∞–Ω—Å—ñ—è
        job = client.get_job_details(job_id)
        if not job:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–í–∞–∫–∞–Ω—Å—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é
        proposal = {
            "id": f"proposal_{job_id}_{int(datetime.utcnow().timestamp())}",
            "job_id": job_id,
            "proposal_text": proposal_text,
            "bid_amount": bid_amount,
            "delivery_time": delivery_time,
            "status": "pending",
            "submitted_at": datetime.utcnow().isoformat()
        }
        
        logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –≤–∞–∫–∞–Ω—Å—ñ—ó: {job_id}")
        
        return {
            "proposal": proposal,
            "job": job,
            "message": "–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"
        )


@app.get("/upwork/clients/{client_id}")
async def get_client(
    client_id: str,
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        client_data = client.get_client_info(client_id)
        if not client_data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            )
        
        logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞: {client_id}")
        
        return {
            "client": client_data
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"
        )


@app.get("/upwork/freelancers/{freelancer_id}")
async def get_freelancer(
    freelancer_id: str,
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ—Ä—ñ–ª–∞–Ω—Å–µ—Ä–∞"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        freelancer = client.get_freelancer_profile(freelancer_id)
        if not freelancer:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–§—Ä—ñ–ª–∞–Ω—Å–µ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            )
        
        logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—Ä—ñ–ª–∞–Ω—Å–µ—Ä–∞: {freelancer_id}")
        
        return {
            "freelancer": freelancer
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—Ä—ñ–ª–∞–Ω—Å–µ—Ä–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—Ä—ñ–ª–∞–Ω—Å–µ—Ä–∞"
        )


@app.get("/upwork/analytics/overview")
async def get_analytics_overview(
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –ø–æ Upwork"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        jobs = client.search_jobs("")
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_jobs = len(jobs)
        total_proposals = 0  # Mock –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
        
        # –ë–µ–∑–ø–µ—á–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –±—é–¥–∂–µ—Ç—É
        total_budget = 0
        budget_count = 0
        for job in jobs:
            if isinstance(job.get("budget"), dict):
                min_budget = job["budget"].get("min", 0)
                max_budget = job["budget"].get("max", 0)
                if isinstance(min_budget, (int, float)) and isinstance(max_budget, (int, float)):
                    total_budget += min_budget + max_budget
                    budget_count += 2
        
        avg_budget = total_budget / budget_count if budget_count > 0 else 0
        
        # –¢–æ–ø –Ω–∞–≤–∏—á–∫–∏
        all_skills = []
        for job in jobs:
            all_skills.extend(job["skills"])
        
        skill_counts = {}
        for skill in all_skills:
            skill_counts[skill] = skill_counts.get(skill, 0) + 1
        
        top_skills = sorted(skill_counts.items(), key=lambda x: x[1], reverse=True)[:5]
        
        logger.info("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É Upwork")
        
        return {
            "overview": {
                "total_jobs": total_jobs,
                "total_proposals": total_proposals,
                "average_budget": round(avg_budget, 2),
                "top_skills": top_skills
            },
            "recent_jobs": MOCK_JOBS[:3],
            "recent_proposals": MOCK_PROPOSALS[:3]
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏"
        )


# –ù–æ–≤—ñ endpoints –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ OAuth —Ç–∞ —Ä–µ–∞–ª—å–Ω–∏–º API

@app.get("/upwork/profile")
async def get_user_profile(
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        profile = client.get_user_profile()
        
        logger.info("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        
        return {
            "profile": profile
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"
        )


@app.post("/upwork/jobs/{job_id}/proposals")
async def submit_proposal(
    job_id: str,
    proposal_data: dict,
    db: Session = Depends(get_db)
):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–≥—É–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å—ñ—é"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        result = client.submit_proposal(job_id, proposal_data)
        
        logger.info(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ñ–¥–≥—É–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å—ñ—é: {job_id}")
        
        return {
            "success": True,
            "proposal": result,
            "job_id": job_id
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–≥—É–∫—É: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–≥—É–∫—É"
        )


@app.get("/upwork/messages")
async def get_messages(
    thread_id: str = None,
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        messages = client.get_messages(thread_id)
        
        logger.info("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        
        return {
            "messages": messages
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
        )


@app.post("/upwork/messages")
async def send_message(
    thread_id: str,
    message: str,
    db: Session = Depends(get_db)
):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        result = client.send_message(thread_id, message)
        
        logger.info(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ thread: {thread_id}")
        
        return {
            "success": True,
            "message": result
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
        )


@app.get("/upwork/categories")
async def get_categories(db: Session = Depends(get_db)):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∞–∫–∞–Ω—Å—ñ–π"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        result = client.get_categories()
        
        logger.info("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∞–∫–∞–Ω—Å—ñ–π –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return {
            "success": True,
            "data": result
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"
        )


@app.get("/upwork/skills")
async def get_skills(db: Session = Depends(get_db)):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–≤–∏—á–æ–∫"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        result = client.get_skills()
        
        logger.info("‚úÖ –ù–∞–≤–∏—á–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return {
            "success": True,
            "data": result
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–≤–∏—á–æ–∫: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–≤–∏—á–æ–∫"
        )


@app.get("/upwork/contracts")
async def get_contracts(db: Session = Depends(get_db)):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        result = client.get_contracts()
        
        logger.info("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return {
            "success": True,
            "data": result
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤"
        )


@app.get("/upwork/earnings")
async def get_earnings(
    from_date: str = None,
    to_date: str = None,
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—Ä–æ–±—ñ—Ç–∫—É"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É API —Ü–µ –±—É–¥–µ –∑ —Ç–æ–∫–µ–Ω–∞)
        freelancer_id = "~0123456789012345"
        result = client.get_earnings(freelancer_id, from_date, to_date)
        
        logger.info("‚úÖ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return {
            "success": True,
            "data": result
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—Ä–æ–±—ñ—Ç–∫—É: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—Ä–æ–±—ñ—Ç–∫—É"
        )


@app.get("/upwork/workdiary")
async def get_workdiary(
    date: str = None,
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        freelancer_id = "~0123456789012345"
        result = client.get_workdiary(freelancer_id, date)
        
        logger.info("‚úÖ –†–æ–±–æ—á–∏–π —â–æ–¥–µ–Ω–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return {
            "success": True,
            "data": result
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞"
        )


@app.get("/upwork/portfolio")
async def get_portfolio(db: Session = Depends(get_db)):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        profile = client.get_user_profile()
        
        # –í–∏–¥—ñ–ª—è—î–º–æ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –∑ –ø—Ä–æ—Ñ—ñ–ª—é
        portfolio = profile.get("portfolio_items", [])
        
        logger.info("‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return {
            "success": True,
            "data": {
                "portfolio_items": portfolio
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ"
        )


@app.get("/upwork/certifications")
async def get_certifications(db: Session = Depends(get_db)):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        profile = client.get_user_profile()
        
        # –í–∏–¥—ñ–ª—è—î–º–æ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é
        certifications = profile.get("certifications", [])
        
        logger.info("‚úÖ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return {
            "success": True,
            "data": {
                "certifications": certifications
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤"
        )


@app.get("/upwork/education")
async def get_education(db: Session = Depends(get_db)):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å–≤—ñ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        profile = client.get_user_profile()
        
        # –í–∏–¥—ñ–ª—è—î–º–æ –æ—Å–≤—ñ—Ç—É –∑ –ø—Ä–æ—Ñ—ñ–ª—é
        education = profile.get("education", [])
        
        logger.info("‚úÖ –û—Å–≤—ñ—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return {
            "success": True,
            "data": {
                "education": education
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å–≤—ñ—Ç–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å–≤—ñ—Ç–∏"
        )


@app.get("/upwork/languages")
async def get_languages(db: Session = Depends(get_db)):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        from src.upwork_client import MockUpworkAPIClient
        
        client = MockUpworkAPIClient()
        profile = client.get_user_profile()
        
        # –í–∏–¥—ñ–ª—è—î–º–æ –º–æ–≤–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é
        languages = profile.get("languages", [])
        
        logger.info("‚úÖ –ú–æ–≤–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return {
            "success": True,
            "data": {
                "languages": languages
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–≤: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–≤"
        )


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8002,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower()
    ) # Updated at Fri Aug  1 14:59:09 EEST 2025
