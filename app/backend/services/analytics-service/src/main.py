"""
Analytics Service - –ú—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ —Ç–∞ –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ
"""

from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ —Å–ø—ñ–ª—å–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..', 'shared'))

from shared.config.settings import settings
from shared.config.logging import setup_logging, get_logger
from shared.database.connection import get_db, db_manager

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
setup_logging(service_name="analytics-service")
logger = get_logger("analytics-service")

# –°—Ç–≤–æ—Ä—é—î–º–æ FastAPI –¥–æ–¥–∞—Ç–æ–∫
app = FastAPI(
    title="Analytics Service",
    description="–ú—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ —Ç–∞ –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ",
    version="1.0.0",
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.on_event("startup")
async def startup_event():
    """–ü–æ–¥—ñ—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—É"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Analytics Service...")
    
    # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    if not db_manager.test_connection():
        logger.warning("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ü—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ –ë–î")
    else:
        logger.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —É—Å–ø—ñ—à–Ω–µ")


@app.get("/")
async def root():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—É"""
    return {
        "service": "Analytics Service",
        "version": "1.0.0",
        "status": "running",
        "timestamp": datetime.utcnow().isoformat()
    }


@app.get("/health")
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É"""
    db_status = "healthy" if db_manager.test_connection() else "unhealthy"
    
    return {
        "status": "healthy",
        "service": "analytics-service",
        "database": db_status,
        "timestamp": datetime.utcnow().isoformat()
    }


@app.get("/analytics/dashboard")
async def get_dashboard_data(
    start_date: str = None,
    end_date: str = None,
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥—É (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "message": "Analytics Service - Dashboard endpoint",
        "status": "not_implemented",
        "start_date": start_date,
        "end_date": end_date
    }


@app.get("/analytics/reports/performance")
async def get_performance_report(
    start_date: str = None,
    end_date: str = None,
    db: Session = Depends(get_db)
):
    """–ó–≤—ñ—Ç –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "message": "Analytics Service - Performance report endpoint",
        "status": "not_implemented",
        "start_date": start_date,
        "end_date": end_date
    }


@app.get("/analytics/reports/revenue")
async def get_revenue_report(
    start_date: str = None,
    end_date: str = None,
    db: Session = Depends(get_db)
):
    """–ó–≤—ñ—Ç –ø—Ä–æ –¥–æ—Ö–æ–¥–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "message": "Analytics Service - Revenue report endpoint",
        "status": "not_implemented",
        "start_date": start_date,
        "end_date": end_date
    }


@app.get("/analytics/metrics")
async def get_metrics(
    metric_type: str = None,
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "message": "Analytics Service - Metrics endpoint",
        "status": "not_implemented",
        "metric_type": metric_type
    }


@app.post("/analytics/track/event")
async def track_event(
    event_type: str,
    event_data: dict,
    db: Session = Depends(get_db)
):
    """–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–¥—ñ—ó (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "message": "Analytics Service - Track event endpoint",
        "status": "not_implemented",
        "event_type": event_type,
        "event_data": event_data
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8004,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower()
    ) 