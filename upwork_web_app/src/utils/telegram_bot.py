"""
–°–∏—Å—Ç–µ–º–∞ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω—å
"""

import requests
import json
from typing import List, Optional, Dict, Any
from datetime import datetime
from dataclasses import dataclass
from loguru import logger

from .logger import structured_logger


@dataclass
class TelegramConfig:
    """–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Telegram –±–æ—Ç–∞"""
    bot_token: str
    chat_ids: List[str]
    parse_mode: str = "HTML"  # HTML –∞–±–æ Markdown


class TelegramNotifier:
    """–°–∏—Å—Ç–µ–º–∞ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    
    def __init__(self, config: TelegramConfig):
        self.config = config
        self.base_url = f"https://api.telegram.org/bot{config.bot_token}"
    
    def send_message(self, 
                    text: str,
                    chat_id: Optional[str] = None,
                    parse_mode: Optional[str] = None) -> bool:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            parse_mode = parse_mode or self.config.parse_mode
            chat_ids = [chat_id] if chat_id else self.config.chat_ids
            
            for chat_id in chat_ids:
                payload = {
                    'chat_id': chat_id,
                    'text': text,
                    'parse_mode': parse_mode
                }
                
                response = requests.post(
                    f"{self.base_url}/sendMessage",
                    json=payload,
                    timeout=10
                )
                
                if response.status_code == 200:
                    logger.info(f"Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                    
                    structured_logger.log_security_event(
                        event_type="telegram_sent",
                        message=f"Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ",
                        data={
                            "chat_id": chat_id,
                            "text_length": len(text)
                        }
                    )
                else:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram: {response.text}")
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            
            structured_logger.log_security_event(
                event_type="telegram_error",
                message=f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram: {e}",
                data={"error": str(e)}
            )
            
            return False
    
    def send_parsing_start_notification(self, 
                                       session_id: str,
                                       search_query: str,
                                       max_pages: int) -> bool:
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥—É"""
        text = f"""
üöÄ <b>–ü–æ—á–∞—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥—É Upwork</b>

üìã <b>–î–µ—Ç–∞–ª—ñ:</b>
‚Ä¢ –°–µ—Å—ñ—è: <code>{session_id}</code>
‚Ä¢ –ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç: <code>{search_query}</code>
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Å—Ç–æ—Ä—ñ–Ω–æ–∫: <code>{max_pages}</code>
‚Ä¢ –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: <code>{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC</code>

–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–≥—Ä–µ—Å –ø–∞—Ä—Å–∏–Ω–≥—É.
        """
        
        return self.send_message(text)
    
    def send_parsing_progress_notification(self,
                                          session_id: str,
                                          current_page: int,
                                          total_pages: int,
                                          jobs_found: int,
                                          jobs_parsed: int,
                                          errors_count: int) -> bool:
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–≥—Ä–µ—Å –ø–∞—Ä—Å–∏–Ω–≥—É"""
        progress_percent = (current_page / total_pages) * 100
        
        # –ï–º–æ–¥–∑—ñ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É
        progress_bar = "‚ñà" * int(progress_percent / 10) + "‚ñë" * (10 - int(progress_percent / 10))
        
        text = f"""
üìä <b>–ü—Ä–æ–≥—Ä–µ—Å –ø–∞—Ä—Å–∏–Ω–≥—É Upwork</b>

{progress_bar} <code>{progress_percent:.1f}%</code>

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –°–µ—Å—ñ—è: <code>{session_id}</code>
‚Ä¢ –°—Ç–æ—Ä—ñ–Ω–∫–∞: <code>{current_page}/{total_pages}</code>
‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–±—ñ—Ç: <code>{jobs_found}</code>
‚Ä¢ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ä–æ–±—ñ—Ç: <code>{jobs_parsed}</code>
‚Ä¢ –ü–æ–º–∏–ª–æ–∫: <code>{errors_count}</code>
‚Ä¢ –ß–∞—Å: <code>{datetime.utcnow().strftime('%H:%M:%S')} UTC</code>
        """
        
        return self.send_message(text)
    
    def send_parsing_complete_notification(self,
                                          session_id: str,
                                          total_jobs_found: int,
                                          jobs_parsed: int,
                                          errors_count: int,
                                          duration_minutes: float) -> bool:
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–∞—Ä—Å–∏–Ω–≥—É"""
        text = f"""
‚úÖ <b>–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!</b>

üéâ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:</b>
‚Ä¢ –°–µ—Å—ñ—è: <code>{session_id}</code>
‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–±—ñ—Ç: <code>{total_jobs_found}</code>
‚Ä¢ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ä–æ–±—ñ—Ç: <code>{jobs_parsed}</code>
‚Ä¢ –ü–æ–º–∏–ª–æ–∫: <code>{errors_count}</code>
‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <code>{duration_minutes:.1f} —Ö–≤</code>
‚Ä¢ –ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: <code>{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC</code>

–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —Ç–∞ –≥–æ—Ç–æ–≤—ñ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.
        """
        
        return self.send_message(text)
    
    def send_error_notification(self,
                               session_id: str,
                               error_message: str,
                               current_page: int = None) -> bool:
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
        text = f"""
‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É</b>

üö® <b>–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:</b>
‚Ä¢ –°–µ—Å—ñ—è: <code>{session_id}</code>
‚Ä¢ –ü–æ–º–∏–ª–∫–∞: <code>{error_message}</code>
‚Ä¢ –°—Ç–æ—Ä—ñ–Ω–∫–∞: <code>{current_page if current_page else '–ù–µ–≤—ñ–¥–æ–º–æ'}</code>
‚Ä¢ –ß–∞—Å: <code>{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC</code>

–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
        """
        
        return self.send_message(text)
    
    def send_system_status_notification(self,
                                       status: str,
                                       details: Dict[str, Any]) -> bool:
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"""
        text = f"""
üîß <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏</b>

üìä <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: <code>{status}</code>
‚Ä¢ –ß–∞—Å: <code>{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC</code>
        """
        
        # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ
        for key, value in details.items():
            text += f"‚Ä¢ {key}: <code>{value}</code>\n"
        
        return self.send_message(text)
    
    def send_proxy_status_notification(self,
                                      active_proxies: int,
                                      total_proxies: int,
                                      failed_proxies: int) -> bool:
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å—ñ"""
        success_rate = ((active_proxies - failed_proxies) / active_proxies * 100) if active_proxies > 0 else 0
        
        text = f"""
üåê <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å—ñ</b>

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–∫—Å—ñ: <code>{active_proxies}</code>
‚Ä¢ –í—Å—å–æ–≥–æ –ø—Ä–æ–∫—Å—ñ: <code>{total_proxies}</code>
‚Ä¢ –ù–µ–≤–¥–∞–ª–∏—Ö –ø—Ä–æ–∫—Å—ñ: <code>{failed_proxies}</code>
‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: <code>{success_rate:.1f}%</code>
‚Ä¢ –ß–∞—Å: <code>{datetime.utcnow().strftime('%H:%M:%S')} UTC</code>
        """
        
        return self.send_message(text)
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram"""
        try:
            response = requests.get(f"{self.base_url}/getMe", timeout=10)
            
            if response.status_code == 200:
                bot_info = response.json()
                logger.info(f"Telegram –±–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π: @{bot_info['result']['username']}")
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                test_text = f"""
ü§ñ <b>–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è</b>

‚úÖ Telegram –±–æ—Ç —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π!
‚Ä¢ –ë–æ—Ç: <code>@{bot_info['result']['username']}</code>
‚Ä¢ –ß–∞—Å: <code>{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC</code>

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏.
                """
                
                return self.send_message(test_text)
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Telegram: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä (–ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é)
telegram_notifier = None 